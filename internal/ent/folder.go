// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ListenUpApp/ListenUp/internal/ent/folder"
)

// Folder is the model entity for the Folder schema.
type Folder struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier for the folder
	ID string `json:"id,omitempty"`
	// The folder's name
	Name string `json:"name,omitempty"`
	// The folders' path
	Path string `json:"path,omitempty"`
	// Time when the folder was last scanned
	LastScannedAt time.Time `json:"last_scanned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FolderQuery when eager-loading is set.
	Edges        FolderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FolderEdges holds the relations/edges for other nodes in the graph.
type FolderEdges struct {
	// Libraries holds the value of the libraries edge.
	Libraries []*Library `json:"libraries,omitempty"`
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LibrariesOrErr returns the Libraries value or an error if the edge
// was not loaded in eager-loading.
func (e FolderEdges) LibrariesOrErr() ([]*Library, error) {
	if e.loadedTypes[0] {
		return e.Libraries, nil
	}
	return nil, &NotLoadedError{edge: "libraries"}
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e FolderEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[1] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Folder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case folder.FieldID, folder.FieldName, folder.FieldPath:
			values[i] = new(sql.NullString)
		case folder.FieldLastScannedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Folder fields.
func (f *Folder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case folder.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case folder.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case folder.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				f.Path = value.String
			}
		case folder.FieldLastScannedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_scanned_at", values[i])
			} else if value.Valid {
				f.LastScannedAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Folder.
// This includes values selected through modifiers, order, etc.
func (f *Folder) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryLibraries queries the "libraries" edge of the Folder entity.
func (f *Folder) QueryLibraries() *LibraryQuery {
	return NewFolderClient(f.config).QueryLibraries(f)
}

// QueryBooks queries the "books" edge of the Folder entity.
func (f *Folder) QueryBooks() *BookQuery {
	return NewFolderClient(f.config).QueryBooks(f)
}

// Update returns a builder for updating this Folder.
// Note that you need to call Folder.Unwrap() before calling this method if this Folder
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Folder) Update() *FolderUpdateOne {
	return NewFolderClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Folder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Folder) Unwrap() *Folder {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Folder is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Folder) String() string {
	var builder strings.Builder
	builder.WriteString("Folder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(f.Path)
	builder.WriteString(", ")
	builder.WriteString("last_scanned_at=")
	builder.WriteString(f.LastScannedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Folders is a parsable slice of Folder.
type Folders []*Folder
