// Code generated by ent, DO NOT EDIT.

package series

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the series type in the database.
	Label = "series"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNameSort holds the string denoting the name_sort field in the database.
	FieldNameSort = "name_sort"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSeriesBooks holds the string denoting the series_books edge name in mutations.
	EdgeSeriesBooks = "series_books"
	// Table holds the table name of the series in the database.
	Table = "series"
	// SeriesBooksTable is the table that holds the series_books relation/edge.
	SeriesBooksTable = "series_books"
	// SeriesBooksInverseTable is the table name for the SeriesBook entity.
	// It exists in this package in order to avoid circular dependency with the "seriesbook" package.
	SeriesBooksInverseTable = "series_books"
	// SeriesBooksColumn is the table column denoting the series_books relation/edge.
	SeriesBooksColumn = "series_series_books"
)

// Columns holds all SQL columns for series fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNameSort,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Series queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNameSort orders the results by the name_sort field.
func ByNameSort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameSort, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySeriesBooksCount orders the results by series_books count.
func BySeriesBooksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeriesBooksStep(), opts...)
	}
}

// BySeriesBooks orders the results by series_books terms.
func BySeriesBooks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeriesBooksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSeriesBooksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeriesBooksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SeriesBooksTable, SeriesBooksColumn),
	)
}
