// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/narrator"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
)

// NarratorUpdate is the builder for updating Narrator entities.
type NarratorUpdate struct {
	config
	hooks    []Hook
	mutation *NarratorMutation
}

// Where appends a list predicates to the NarratorUpdate builder.
func (nu *NarratorUpdate) Where(ps ...predicate.Narrator) *NarratorUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NarratorUpdate) SetName(s string) *NarratorUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NarratorUpdate) SetNillableName(s *string) *NarratorUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NarratorUpdate) SetDescription(s string) *NarratorUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NarratorUpdate) SetNillableDescription(s *string) *NarratorUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NarratorUpdate) ClearDescription() *NarratorUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetImagePath sets the "image_path" field.
func (nu *NarratorUpdate) SetImagePath(s string) *NarratorUpdate {
	nu.mutation.SetImagePath(s)
	return nu
}

// SetNillableImagePath sets the "image_path" field if the given value is not nil.
func (nu *NarratorUpdate) SetNillableImagePath(s *string) *NarratorUpdate {
	if s != nil {
		nu.SetImagePath(*s)
	}
	return nu
}

// ClearImagePath clears the value of the "image_path" field.
func (nu *NarratorUpdate) ClearImagePath() *NarratorUpdate {
	nu.mutation.ClearImagePath()
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NarratorUpdate) SetUpdatedAt(t time.Time) *NarratorUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (nu *NarratorUpdate) AddBookIDs(ids ...string) *NarratorUpdate {
	nu.mutation.AddBookIDs(ids...)
	return nu
}

// AddBooks adds the "books" edges to the Book entity.
func (nu *NarratorUpdate) AddBooks(b ...*Book) *NarratorUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.AddBookIDs(ids...)
}

// Mutation returns the NarratorMutation object of the builder.
func (nu *NarratorUpdate) Mutation() *NarratorMutation {
	return nu.mutation
}

// ClearBooks clears all "books" edges to the Book entity.
func (nu *NarratorUpdate) ClearBooks() *NarratorUpdate {
	nu.mutation.ClearBooks()
	return nu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (nu *NarratorUpdate) RemoveBookIDs(ids ...string) *NarratorUpdate {
	nu.mutation.RemoveBookIDs(ids...)
	return nu
}

// RemoveBooks removes "books" edges to Book entities.
func (nu *NarratorUpdate) RemoveBooks(b ...*Book) *NarratorUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NarratorUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NarratorUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NarratorUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NarratorUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NarratorUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := narrator.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NarratorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(narrator.Table, narrator.Columns, sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(narrator.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(narrator.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(narrator.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.ImagePath(); ok {
		_spec.SetField(narrator.FieldImagePath, field.TypeString, value)
	}
	if nu.mutation.ImagePathCleared() {
		_spec.ClearField(narrator.FieldImagePath, field.TypeString)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(narrator.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrator.BooksTable,
			Columns: narrator.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !nu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrator.BooksTable,
			Columns: narrator.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrator.BooksTable,
			Columns: narrator.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{narrator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NarratorUpdateOne is the builder for updating a single Narrator entity.
type NarratorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NarratorMutation
}

// SetName sets the "name" field.
func (nuo *NarratorUpdateOne) SetName(s string) *NarratorUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NarratorUpdateOne) SetNillableName(s *string) *NarratorUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NarratorUpdateOne) SetDescription(s string) *NarratorUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NarratorUpdateOne) SetNillableDescription(s *string) *NarratorUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NarratorUpdateOne) ClearDescription() *NarratorUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetImagePath sets the "image_path" field.
func (nuo *NarratorUpdateOne) SetImagePath(s string) *NarratorUpdateOne {
	nuo.mutation.SetImagePath(s)
	return nuo
}

// SetNillableImagePath sets the "image_path" field if the given value is not nil.
func (nuo *NarratorUpdateOne) SetNillableImagePath(s *string) *NarratorUpdateOne {
	if s != nil {
		nuo.SetImagePath(*s)
	}
	return nuo
}

// ClearImagePath clears the value of the "image_path" field.
func (nuo *NarratorUpdateOne) ClearImagePath() *NarratorUpdateOne {
	nuo.mutation.ClearImagePath()
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NarratorUpdateOne) SetUpdatedAt(t time.Time) *NarratorUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (nuo *NarratorUpdateOne) AddBookIDs(ids ...string) *NarratorUpdateOne {
	nuo.mutation.AddBookIDs(ids...)
	return nuo
}

// AddBooks adds the "books" edges to the Book entity.
func (nuo *NarratorUpdateOne) AddBooks(b ...*Book) *NarratorUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.AddBookIDs(ids...)
}

// Mutation returns the NarratorMutation object of the builder.
func (nuo *NarratorUpdateOne) Mutation() *NarratorMutation {
	return nuo.mutation
}

// ClearBooks clears all "books" edges to the Book entity.
func (nuo *NarratorUpdateOne) ClearBooks() *NarratorUpdateOne {
	nuo.mutation.ClearBooks()
	return nuo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (nuo *NarratorUpdateOne) RemoveBookIDs(ids ...string) *NarratorUpdateOne {
	nuo.mutation.RemoveBookIDs(ids...)
	return nuo
}

// RemoveBooks removes "books" edges to Book entities.
func (nuo *NarratorUpdateOne) RemoveBooks(b ...*Book) *NarratorUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.RemoveBookIDs(ids...)
}

// Where appends a list predicates to the NarratorUpdate builder.
func (nuo *NarratorUpdateOne) Where(ps ...predicate.Narrator) *NarratorUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NarratorUpdateOne) Select(field string, fields ...string) *NarratorUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Narrator entity.
func (nuo *NarratorUpdateOne) Save(ctx context.Context) (*Narrator, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NarratorUpdateOne) SaveX(ctx context.Context) *Narrator {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NarratorUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NarratorUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NarratorUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := narrator.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NarratorUpdateOne) sqlSave(ctx context.Context) (_node *Narrator, err error) {
	_spec := sqlgraph.NewUpdateSpec(narrator.Table, narrator.Columns, sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Narrator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, narrator.FieldID)
		for _, f := range fields {
			if !narrator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != narrator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(narrator.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(narrator.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(narrator.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.ImagePath(); ok {
		_spec.SetField(narrator.FieldImagePath, field.TypeString, value)
	}
	if nuo.mutation.ImagePathCleared() {
		_spec.ClearField(narrator.FieldImagePath, field.TypeString)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(narrator.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrator.BooksTable,
			Columns: narrator.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !nuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrator.BooksTable,
			Columns: narrator.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrator.BooksTable,
			Columns: narrator.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Narrator{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{narrator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
