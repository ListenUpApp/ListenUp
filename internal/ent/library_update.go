// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/folder"
	"github.com/ListenUpApp/ListenUp/internal/ent/library"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
	"github.com/ListenUpApp/ListenUp/internal/ent/user"
)

// LibraryUpdate is the builder for updating Library entities.
type LibraryUpdate struct {
	config
	hooks    []Hook
	mutation *LibraryMutation
}

// Where appends a list predicates to the LibraryUpdate builder.
func (lu *LibraryUpdate) Where(ps ...predicate.Library) *LibraryUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LibraryUpdate) SetName(s string) *LibraryUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableName(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (lu *LibraryUpdate) AddUserIDs(ids ...string) *LibraryUpdate {
	lu.mutation.AddUserIDs(ids...)
	return lu
}

// AddUsers adds the "users" edges to the User entity.
func (lu *LibraryUpdate) AddUsers(u ...*User) *LibraryUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.AddUserIDs(ids...)
}

// AddActiveUserIDs adds the "active_users" edge to the User entity by IDs.
func (lu *LibraryUpdate) AddActiveUserIDs(ids ...string) *LibraryUpdate {
	lu.mutation.AddActiveUserIDs(ids...)
	return lu
}

// AddActiveUsers adds the "active_users" edges to the User entity.
func (lu *LibraryUpdate) AddActiveUsers(u ...*User) *LibraryUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.AddActiveUserIDs(ids...)
}

// AddFolderIDs adds the "folders" edge to the Folder entity by IDs.
func (lu *LibraryUpdate) AddFolderIDs(ids ...string) *LibraryUpdate {
	lu.mutation.AddFolderIDs(ids...)
	return lu
}

// AddFolders adds the "folders" edges to the Folder entity.
func (lu *LibraryUpdate) AddFolders(f ...*Folder) *LibraryUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return lu.AddFolderIDs(ids...)
}

// Mutation returns the LibraryMutation object of the builder.
func (lu *LibraryUpdate) Mutation() *LibraryMutation {
	return lu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (lu *LibraryUpdate) ClearUsers() *LibraryUpdate {
	lu.mutation.ClearUsers()
	return lu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (lu *LibraryUpdate) RemoveUserIDs(ids ...string) *LibraryUpdate {
	lu.mutation.RemoveUserIDs(ids...)
	return lu
}

// RemoveUsers removes "users" edges to User entities.
func (lu *LibraryUpdate) RemoveUsers(u ...*User) *LibraryUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.RemoveUserIDs(ids...)
}

// ClearActiveUsers clears all "active_users" edges to the User entity.
func (lu *LibraryUpdate) ClearActiveUsers() *LibraryUpdate {
	lu.mutation.ClearActiveUsers()
	return lu
}

// RemoveActiveUserIDs removes the "active_users" edge to User entities by IDs.
func (lu *LibraryUpdate) RemoveActiveUserIDs(ids ...string) *LibraryUpdate {
	lu.mutation.RemoveActiveUserIDs(ids...)
	return lu
}

// RemoveActiveUsers removes "active_users" edges to User entities.
func (lu *LibraryUpdate) RemoveActiveUsers(u ...*User) *LibraryUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.RemoveActiveUserIDs(ids...)
}

// ClearFolders clears all "folders" edges to the Folder entity.
func (lu *LibraryUpdate) ClearFolders() *LibraryUpdate {
	lu.mutation.ClearFolders()
	return lu
}

// RemoveFolderIDs removes the "folders" edge to Folder entities by IDs.
func (lu *LibraryUpdate) RemoveFolderIDs(ids ...string) *LibraryUpdate {
	lu.mutation.RemoveFolderIDs(ids...)
	return lu
}

// RemoveFolders removes "folders" edges to Folder entities.
func (lu *LibraryUpdate) RemoveFolders(f ...*Folder) *LibraryUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return lu.RemoveFolderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LibraryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LibraryUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LibraryUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LibraryUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LibraryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(library.Table, library.Columns, sqlgraph.NewFieldSpec(library.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(library.FieldName, field.TypeString, value)
	}
	if lu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   library.UsersTable,
			Columns: library.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !lu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   library.UsersTable,
			Columns: library.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   library.UsersTable,
			Columns: library.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.ActiveUsersTable,
			Columns: []string{library.ActiveUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedActiveUsersIDs(); len(nodes) > 0 && !lu.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.ActiveUsersTable,
			Columns: []string{library.ActiveUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ActiveUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.ActiveUsersTable,
			Columns: []string{library.ActiveUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.FoldersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   library.FoldersTable,
			Columns: library.FoldersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedFoldersIDs(); len(nodes) > 0 && !lu.mutation.FoldersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   library.FoldersTable,
			Columns: library.FoldersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.FoldersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   library.FoldersTable,
			Columns: library.FoldersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{library.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LibraryUpdateOne is the builder for updating a single Library entity.
type LibraryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LibraryMutation
}

// SetName sets the "name" field.
func (luo *LibraryUpdateOne) SetName(s string) *LibraryUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableName(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (luo *LibraryUpdateOne) AddUserIDs(ids ...string) *LibraryUpdateOne {
	luo.mutation.AddUserIDs(ids...)
	return luo
}

// AddUsers adds the "users" edges to the User entity.
func (luo *LibraryUpdateOne) AddUsers(u ...*User) *LibraryUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.AddUserIDs(ids...)
}

// AddActiveUserIDs adds the "active_users" edge to the User entity by IDs.
func (luo *LibraryUpdateOne) AddActiveUserIDs(ids ...string) *LibraryUpdateOne {
	luo.mutation.AddActiveUserIDs(ids...)
	return luo
}

// AddActiveUsers adds the "active_users" edges to the User entity.
func (luo *LibraryUpdateOne) AddActiveUsers(u ...*User) *LibraryUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.AddActiveUserIDs(ids...)
}

// AddFolderIDs adds the "folders" edge to the Folder entity by IDs.
func (luo *LibraryUpdateOne) AddFolderIDs(ids ...string) *LibraryUpdateOne {
	luo.mutation.AddFolderIDs(ids...)
	return luo
}

// AddFolders adds the "folders" edges to the Folder entity.
func (luo *LibraryUpdateOne) AddFolders(f ...*Folder) *LibraryUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return luo.AddFolderIDs(ids...)
}

// Mutation returns the LibraryMutation object of the builder.
func (luo *LibraryUpdateOne) Mutation() *LibraryMutation {
	return luo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (luo *LibraryUpdateOne) ClearUsers() *LibraryUpdateOne {
	luo.mutation.ClearUsers()
	return luo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (luo *LibraryUpdateOne) RemoveUserIDs(ids ...string) *LibraryUpdateOne {
	luo.mutation.RemoveUserIDs(ids...)
	return luo
}

// RemoveUsers removes "users" edges to User entities.
func (luo *LibraryUpdateOne) RemoveUsers(u ...*User) *LibraryUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.RemoveUserIDs(ids...)
}

// ClearActiveUsers clears all "active_users" edges to the User entity.
func (luo *LibraryUpdateOne) ClearActiveUsers() *LibraryUpdateOne {
	luo.mutation.ClearActiveUsers()
	return luo
}

// RemoveActiveUserIDs removes the "active_users" edge to User entities by IDs.
func (luo *LibraryUpdateOne) RemoveActiveUserIDs(ids ...string) *LibraryUpdateOne {
	luo.mutation.RemoveActiveUserIDs(ids...)
	return luo
}

// RemoveActiveUsers removes "active_users" edges to User entities.
func (luo *LibraryUpdateOne) RemoveActiveUsers(u ...*User) *LibraryUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.RemoveActiveUserIDs(ids...)
}

// ClearFolders clears all "folders" edges to the Folder entity.
func (luo *LibraryUpdateOne) ClearFolders() *LibraryUpdateOne {
	luo.mutation.ClearFolders()
	return luo
}

// RemoveFolderIDs removes the "folders" edge to Folder entities by IDs.
func (luo *LibraryUpdateOne) RemoveFolderIDs(ids ...string) *LibraryUpdateOne {
	luo.mutation.RemoveFolderIDs(ids...)
	return luo
}

// RemoveFolders removes "folders" edges to Folder entities.
func (luo *LibraryUpdateOne) RemoveFolders(f ...*Folder) *LibraryUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return luo.RemoveFolderIDs(ids...)
}

// Where appends a list predicates to the LibraryUpdate builder.
func (luo *LibraryUpdateOne) Where(ps ...predicate.Library) *LibraryUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LibraryUpdateOne) Select(field string, fields ...string) *LibraryUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Library entity.
func (luo *LibraryUpdateOne) Save(ctx context.Context) (*Library, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LibraryUpdateOne) SaveX(ctx context.Context) *Library {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LibraryUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LibraryUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LibraryUpdateOne) sqlSave(ctx context.Context) (_node *Library, err error) {
	_spec := sqlgraph.NewUpdateSpec(library.Table, library.Columns, sqlgraph.NewFieldSpec(library.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Library.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, library.FieldID)
		for _, f := range fields {
			if !library.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != library.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(library.FieldName, field.TypeString, value)
	}
	if luo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   library.UsersTable,
			Columns: library.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !luo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   library.UsersTable,
			Columns: library.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   library.UsersTable,
			Columns: library.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.ActiveUsersTable,
			Columns: []string{library.ActiveUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedActiveUsersIDs(); len(nodes) > 0 && !luo.mutation.ActiveUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.ActiveUsersTable,
			Columns: []string{library.ActiveUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ActiveUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.ActiveUsersTable,
			Columns: []string{library.ActiveUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.FoldersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   library.FoldersTable,
			Columns: library.FoldersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedFoldersIDs(); len(nodes) > 0 && !luo.mutation.FoldersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   library.FoldersTable,
			Columns: library.FoldersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.FoldersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   library.FoldersTable,
			Columns: library.FoldersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Library{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{library.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
