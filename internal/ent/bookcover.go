// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
)

// BookCover is the model entity for the BookCover schema.
type BookCover struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path to the cover image
	Path string `json:"path,omitempty"`
	// Image format (jpeg, png, webp)
	Format string `json:"format,omitempty"`
	// File size in bytes
	Size int64 `json:"size,omitempty"`
	// When the cover was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookCoverQuery when eager-loading is set.
	Edges        BookCoverEdges `json:"edges"`
	book_cover   *string
	selectValues sql.SelectValues
}

// BookCoverEdges holds the relations/edges for other nodes in the graph.
type BookCoverEdges struct {
	// Book holds the value of the book edge.
	Book *Book `json:"book,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookOrErr returns the Book value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookCoverEdges) BookOrErr() (*Book, error) {
	if e.Book != nil {
		return e.Book, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: book.Label}
	}
	return nil, &NotLoadedError{edge: "book"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookCover) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookcover.FieldID, bookcover.FieldSize:
			values[i] = new(sql.NullInt64)
		case bookcover.FieldPath, bookcover.FieldFormat:
			values[i] = new(sql.NullString)
		case bookcover.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bookcover.ForeignKeys[0]: // book_cover
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookCover fields.
func (bc *BookCover) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookcover.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bc.ID = int(value.Int64)
		case bookcover.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				bc.Path = value.String
			}
		case bookcover.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				bc.Format = value.String
			}
		case bookcover.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				bc.Size = value.Int64
			}
		case bookcover.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bc.UpdatedAt = value.Time
			}
		case bookcover.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field book_cover", values[i])
			} else if value.Valid {
				bc.book_cover = new(string)
				*bc.book_cover = value.String
			}
		default:
			bc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookCover.
// This includes values selected through modifiers, order, etc.
func (bc *BookCover) Value(name string) (ent.Value, error) {
	return bc.selectValues.Get(name)
}

// QueryBook queries the "book" edge of the BookCover entity.
func (bc *BookCover) QueryBook() *BookQuery {
	return NewBookCoverClient(bc.config).QueryBook(bc)
}

// Update returns a builder for updating this BookCover.
// Note that you need to call BookCover.Unwrap() before calling this method if this BookCover
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BookCover) Update() *BookCoverUpdateOne {
	return NewBookCoverClient(bc.config).UpdateOne(bc)
}

// Unwrap unwraps the BookCover entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BookCover) Unwrap() *BookCover {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookCover is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BookCover) String() string {
	var builder strings.Builder
	builder.WriteString("BookCover(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("path=")
	builder.WriteString(bc.Path)
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(bc.Format)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", bc.Size))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BookCovers is a parsable slice of BookCover.
type BookCovers []*BookCover
