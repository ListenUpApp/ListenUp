// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
	"github.com/ListenUpApp/ListenUp/internal/ent/server"
	"github.com/ListenUpApp/ListenUp/internal/ent/serverconfig"
)

// ServerConfigUpdate is the builder for updating ServerConfig entities.
type ServerConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ServerConfigMutation
}

// Where appends a list predicates to the ServerConfigUpdate builder.
func (scu *ServerConfigUpdate) Where(ps ...predicate.ServerConfig) *ServerConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetName sets the "name" field.
func (scu *ServerConfigUpdate) SetName(s string) *ServerConfigUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scu *ServerConfigUpdate) SetNillableName(s *string) *ServerConfigUpdate {
	if s != nil {
		scu.SetName(*s)
	}
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ServerConfigUpdate) SetUpdatedAt(t time.Time) *ServerConfigUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (scu *ServerConfigUpdate) SetServerID(id int) *ServerConfigUpdate {
	scu.mutation.SetServerID(id)
	return scu
}

// SetNillableServerID sets the "server" edge to the Server entity by ID if the given value is not nil.
func (scu *ServerConfigUpdate) SetNillableServerID(id *int) *ServerConfigUpdate {
	if id != nil {
		scu = scu.SetServerID(*id)
	}
	return scu
}

// SetServer sets the "server" edge to the Server entity.
func (scu *ServerConfigUpdate) SetServer(s *Server) *ServerConfigUpdate {
	return scu.SetServerID(s.ID)
}

// Mutation returns the ServerConfigMutation object of the builder.
func (scu *ServerConfigUpdate) Mutation() *ServerConfigMutation {
	return scu.mutation
}

// ClearServer clears the "server" edge to the Server entity.
func (scu *ServerConfigUpdate) ClearServer() *ServerConfigUpdate {
	scu.mutation.ClearServer()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ServerConfigUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ServerConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ServerConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ServerConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ServerConfigUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := serverconfig.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ServerConfigUpdate) check() error {
	if v, ok := scu.mutation.Name(); ok {
		if err := serverconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServerConfig.name": %w`, err)}
		}
	}
	return nil
}

func (scu *ServerConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serverconfig.Table, serverconfig.Columns, sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(serverconfig.FieldName, field.TypeString, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(serverconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serverconfig.ServerTable,
			Columns: []string{serverconfig.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serverconfig.ServerTable,
			Columns: []string{serverconfig.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serverconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ServerConfigUpdateOne is the builder for updating a single ServerConfig entity.
type ServerConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerConfigMutation
}

// SetName sets the "name" field.
func (scuo *ServerConfigUpdateOne) SetName(s string) *ServerConfigUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scuo *ServerConfigUpdateOne) SetNillableName(s *string) *ServerConfigUpdateOne {
	if s != nil {
		scuo.SetName(*s)
	}
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ServerConfigUpdateOne) SetUpdatedAt(t time.Time) *ServerConfigUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (scuo *ServerConfigUpdateOne) SetServerID(id int) *ServerConfigUpdateOne {
	scuo.mutation.SetServerID(id)
	return scuo
}

// SetNillableServerID sets the "server" edge to the Server entity by ID if the given value is not nil.
func (scuo *ServerConfigUpdateOne) SetNillableServerID(id *int) *ServerConfigUpdateOne {
	if id != nil {
		scuo = scuo.SetServerID(*id)
	}
	return scuo
}

// SetServer sets the "server" edge to the Server entity.
func (scuo *ServerConfigUpdateOne) SetServer(s *Server) *ServerConfigUpdateOne {
	return scuo.SetServerID(s.ID)
}

// Mutation returns the ServerConfigMutation object of the builder.
func (scuo *ServerConfigUpdateOne) Mutation() *ServerConfigMutation {
	return scuo.mutation
}

// ClearServer clears the "server" edge to the Server entity.
func (scuo *ServerConfigUpdateOne) ClearServer() *ServerConfigUpdateOne {
	scuo.mutation.ClearServer()
	return scuo
}

// Where appends a list predicates to the ServerConfigUpdate builder.
func (scuo *ServerConfigUpdateOne) Where(ps ...predicate.ServerConfig) *ServerConfigUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ServerConfigUpdateOne) Select(field string, fields ...string) *ServerConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ServerConfig entity.
func (scuo *ServerConfigUpdateOne) Save(ctx context.Context) (*ServerConfig, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ServerConfigUpdateOne) SaveX(ctx context.Context) *ServerConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ServerConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ServerConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ServerConfigUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := serverconfig.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ServerConfigUpdateOne) check() error {
	if v, ok := scuo.mutation.Name(); ok {
		if err := serverconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServerConfig.name": %w`, err)}
		}
	}
	return nil
}

func (scuo *ServerConfigUpdateOne) sqlSave(ctx context.Context) (_node *ServerConfig, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serverconfig.Table, serverconfig.Columns, sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServerConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serverconfig.FieldID)
		for _, f := range fields {
			if !serverconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serverconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(serverconfig.FieldName, field.TypeString, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serverconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serverconfig.ServerTable,
			Columns: []string{serverconfig.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serverconfig.ServerTable,
			Columns: []string{serverconfig.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serverconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
