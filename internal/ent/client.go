// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ListenUpApp/ListenUp/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ListenUpApp/ListenUp/internal/ent/author"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/chapter"
	"github.com/ListenUpApp/ListenUp/internal/ent/coverversion"
	"github.com/ListenUpApp/ListenUp/internal/ent/folder"
	"github.com/ListenUpApp/ListenUp/internal/ent/library"
	"github.com/ListenUpApp/ListenUp/internal/ent/narrator"
	"github.com/ListenUpApp/ListenUp/internal/ent/series"
	"github.com/ListenUpApp/ListenUp/internal/ent/seriesbook"
	"github.com/ListenUpApp/ListenUp/internal/ent/server"
	"github.com/ListenUpApp/ListenUp/internal/ent/serverconfig"
	"github.com/ListenUpApp/ListenUp/internal/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Author is the client for interacting with the Author builders.
	Author *AuthorClient
	// Book is the client for interacting with the Book builders.
	Book *BookClient
	// BookCover is the client for interacting with the BookCover builders.
	BookCover *BookCoverClient
	// Chapter is the client for interacting with the Chapter builders.
	Chapter *ChapterClient
	// CoverVersion is the client for interacting with the CoverVersion builders.
	CoverVersion *CoverVersionClient
	// Folder is the client for interacting with the Folder builders.
	Folder *FolderClient
	// Library is the client for interacting with the Library builders.
	Library *LibraryClient
	// Narrator is the client for interacting with the Narrator builders.
	Narrator *NarratorClient
	// Series is the client for interacting with the Series builders.
	Series *SeriesClient
	// SeriesBook is the client for interacting with the SeriesBook builders.
	SeriesBook *SeriesBookClient
	// Server is the client for interacting with the Server builders.
	Server *ServerClient
	// ServerConfig is the client for interacting with the ServerConfig builders.
	ServerConfig *ServerConfigClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Author = NewAuthorClient(c.config)
	c.Book = NewBookClient(c.config)
	c.BookCover = NewBookCoverClient(c.config)
	c.Chapter = NewChapterClient(c.config)
	c.CoverVersion = NewCoverVersionClient(c.config)
	c.Folder = NewFolderClient(c.config)
	c.Library = NewLibraryClient(c.config)
	c.Narrator = NewNarratorClient(c.config)
	c.Series = NewSeriesClient(c.config)
	c.SeriesBook = NewSeriesBookClient(c.config)
	c.Server = NewServerClient(c.config)
	c.ServerConfig = NewServerConfigClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Author:       NewAuthorClient(cfg),
		Book:         NewBookClient(cfg),
		BookCover:    NewBookCoverClient(cfg),
		Chapter:      NewChapterClient(cfg),
		CoverVersion: NewCoverVersionClient(cfg),
		Folder:       NewFolderClient(cfg),
		Library:      NewLibraryClient(cfg),
		Narrator:     NewNarratorClient(cfg),
		Series:       NewSeriesClient(cfg),
		SeriesBook:   NewSeriesBookClient(cfg),
		Server:       NewServerClient(cfg),
		ServerConfig: NewServerConfigClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Author:       NewAuthorClient(cfg),
		Book:         NewBookClient(cfg),
		BookCover:    NewBookCoverClient(cfg),
		Chapter:      NewChapterClient(cfg),
		CoverVersion: NewCoverVersionClient(cfg),
		Folder:       NewFolderClient(cfg),
		Library:      NewLibraryClient(cfg),
		Narrator:     NewNarratorClient(cfg),
		Series:       NewSeriesClient(cfg),
		SeriesBook:   NewSeriesBookClient(cfg),
		Server:       NewServerClient(cfg),
		ServerConfig: NewServerConfigClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Author.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Author, c.Book, c.BookCover, c.Chapter, c.CoverVersion, c.Folder, c.Library,
		c.Narrator, c.Series, c.SeriesBook, c.Server, c.ServerConfig, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Author, c.Book, c.BookCover, c.Chapter, c.CoverVersion, c.Folder, c.Library,
		c.Narrator, c.Series, c.SeriesBook, c.Server, c.ServerConfig, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthorMutation:
		return c.Author.mutate(ctx, m)
	case *BookMutation:
		return c.Book.mutate(ctx, m)
	case *BookCoverMutation:
		return c.BookCover.mutate(ctx, m)
	case *ChapterMutation:
		return c.Chapter.mutate(ctx, m)
	case *CoverVersionMutation:
		return c.CoverVersion.mutate(ctx, m)
	case *FolderMutation:
		return c.Folder.mutate(ctx, m)
	case *LibraryMutation:
		return c.Library.mutate(ctx, m)
	case *NarratorMutation:
		return c.Narrator.mutate(ctx, m)
	case *SeriesMutation:
		return c.Series.mutate(ctx, m)
	case *SeriesBookMutation:
		return c.SeriesBook.mutate(ctx, m)
	case *ServerMutation:
		return c.Server.mutate(ctx, m)
	case *ServerConfigMutation:
		return c.ServerConfig.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthorClient is a client for the Author schema.
type AuthorClient struct {
	config
}

// NewAuthorClient returns a client for the Author from the given config.
func NewAuthorClient(c config) *AuthorClient {
	return &AuthorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `author.Hooks(f(g(h())))`.
func (c *AuthorClient) Use(hooks ...Hook) {
	c.hooks.Author = append(c.hooks.Author, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `author.Intercept(f(g(h())))`.
func (c *AuthorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Author = append(c.inters.Author, interceptors...)
}

// Create returns a builder for creating a Author entity.
func (c *AuthorClient) Create() *AuthorCreate {
	mutation := newAuthorMutation(c.config, OpCreate)
	return &AuthorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Author entities.
func (c *AuthorClient) CreateBulk(builders ...*AuthorCreate) *AuthorCreateBulk {
	return &AuthorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthorClient) MapCreateBulk(slice any, setFunc func(*AuthorCreate, int)) *AuthorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthorCreateBulk{err: fmt.Errorf("calling to AuthorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Author.
func (c *AuthorClient) Update() *AuthorUpdate {
	mutation := newAuthorMutation(c.config, OpUpdate)
	return &AuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthorClient) UpdateOne(a *Author) *AuthorUpdateOne {
	mutation := newAuthorMutation(c.config, OpUpdateOne, withAuthor(a))
	return &AuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthorClient) UpdateOneID(id string) *AuthorUpdateOne {
	mutation := newAuthorMutation(c.config, OpUpdateOne, withAuthorID(id))
	return &AuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Author.
func (c *AuthorClient) Delete() *AuthorDelete {
	mutation := newAuthorMutation(c.config, OpDelete)
	return &AuthorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthorClient) DeleteOne(a *Author) *AuthorDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthorClient) DeleteOneID(id string) *AuthorDeleteOne {
	builder := c.Delete().Where(author.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthorDeleteOne{builder}
}

// Query returns a query builder for Author.
func (c *AuthorClient) Query() *AuthorQuery {
	return &AuthorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthor},
		inters: c.Interceptors(),
	}
}

// Get returns a Author entity by its id.
func (c *AuthorClient) Get(ctx context.Context, id string) (*Author, error) {
	return c.Query().Where(author.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthorClient) GetX(ctx context.Context, id string) *Author {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBooks queries the books edge of a Author.
func (c *AuthorClient) QueryBooks(a *Author) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(author.Table, author.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, author.BooksTable, author.BooksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthorClient) Hooks() []Hook {
	return c.hooks.Author
}

// Interceptors returns the client interceptors.
func (c *AuthorClient) Interceptors() []Interceptor {
	return c.inters.Author
}

func (c *AuthorClient) mutate(ctx context.Context, m *AuthorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Author mutation op: %q", m.Op())
	}
}

// BookClient is a client for the Book schema.
type BookClient struct {
	config
}

// NewBookClient returns a client for the Book from the given config.
func NewBookClient(c config) *BookClient {
	return &BookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `book.Hooks(f(g(h())))`.
func (c *BookClient) Use(hooks ...Hook) {
	c.hooks.Book = append(c.hooks.Book, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `book.Intercept(f(g(h())))`.
func (c *BookClient) Intercept(interceptors ...Interceptor) {
	c.inters.Book = append(c.inters.Book, interceptors...)
}

// Create returns a builder for creating a Book entity.
func (c *BookClient) Create() *BookCreate {
	mutation := newBookMutation(c.config, OpCreate)
	return &BookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Book entities.
func (c *BookClient) CreateBulk(builders ...*BookCreate) *BookCreateBulk {
	return &BookCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BookClient) MapCreateBulk(slice any, setFunc func(*BookCreate, int)) *BookCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BookCreateBulk{err: fmt.Errorf("calling to BookClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BookCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Book.
func (c *BookClient) Update() *BookUpdate {
	mutation := newBookMutation(c.config, OpUpdate)
	return &BookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookClient) UpdateOne(b *Book) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBook(b))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookClient) UpdateOneID(id string) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBookID(id))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Book.
func (c *BookClient) Delete() *BookDelete {
	mutation := newBookMutation(c.config, OpDelete)
	return &BookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BookClient) DeleteOne(b *Book) *BookDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BookClient) DeleteOneID(id string) *BookDeleteOne {
	builder := c.Delete().Where(book.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookDeleteOne{builder}
}

// Query returns a query builder for Book.
func (c *BookClient) Query() *BookQuery {
	return &BookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBook},
		inters: c.Interceptors(),
	}
}

// Get returns a Book entity by its id.
func (c *BookClient) Get(ctx context.Context, id string) (*Book, error) {
	return c.Query().Where(book.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookClient) GetX(ctx context.Context, id string) *Book {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChapters queries the chapters edge of a Book.
func (c *BookClient) QueryChapters(b *Book) *ChapterQuery {
	query := (&ChapterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(chapter.Table, chapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, book.ChaptersTable, book.ChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCover queries the cover edge of a Book.
func (c *BookClient) QueryCover(b *Book) *BookCoverQuery {
	query := (&BookCoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(bookcover.Table, bookcover.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, book.CoverTable, book.CoverColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthors queries the authors edge of a Book.
func (c *BookClient) QueryAuthors(b *Book) *AuthorQuery {
	query := (&AuthorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(author.Table, author.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, book.AuthorsTable, book.AuthorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNarrators queries the narrators edge of a Book.
func (c *BookClient) QueryNarrators(b *Book) *NarratorQuery {
	query := (&NarratorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(narrator.Table, narrator.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, book.NarratorsTable, book.NarratorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLibrary queries the library edge of a Book.
func (c *BookClient) QueryLibrary(b *Book) *LibraryQuery {
	query := (&LibraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(library.Table, library.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, book.LibraryTable, book.LibraryColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFolder queries the folder edge of a Book.
func (c *BookClient) QueryFolder(b *Book) *FolderQuery {
	query := (&FolderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(folder.Table, folder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, book.FolderTable, book.FolderColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeriesBooks queries the series_books edge of a Book.
func (c *BookClient) QuerySeriesBooks(b *Book) *SeriesBookQuery {
	query := (&SeriesBookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(seriesbook.Table, seriesbook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, book.SeriesBooksTable, book.SeriesBooksColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookClient) Hooks() []Hook {
	return c.hooks.Book
}

// Interceptors returns the client interceptors.
func (c *BookClient) Interceptors() []Interceptor {
	return c.inters.Book
}

func (c *BookClient) mutate(ctx context.Context, m *BookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Book mutation op: %q", m.Op())
	}
}

// BookCoverClient is a client for the BookCover schema.
type BookCoverClient struct {
	config
}

// NewBookCoverClient returns a client for the BookCover from the given config.
func NewBookCoverClient(c config) *BookCoverClient {
	return &BookCoverClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookcover.Hooks(f(g(h())))`.
func (c *BookCoverClient) Use(hooks ...Hook) {
	c.hooks.BookCover = append(c.hooks.BookCover, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bookcover.Intercept(f(g(h())))`.
func (c *BookCoverClient) Intercept(interceptors ...Interceptor) {
	c.inters.BookCover = append(c.inters.BookCover, interceptors...)
}

// Create returns a builder for creating a BookCover entity.
func (c *BookCoverClient) Create() *BookCoverCreate {
	mutation := newBookCoverMutation(c.config, OpCreate)
	return &BookCoverCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BookCover entities.
func (c *BookCoverClient) CreateBulk(builders ...*BookCoverCreate) *BookCoverCreateBulk {
	return &BookCoverCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BookCoverClient) MapCreateBulk(slice any, setFunc func(*BookCoverCreate, int)) *BookCoverCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BookCoverCreateBulk{err: fmt.Errorf("calling to BookCoverClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BookCoverCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BookCoverCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BookCover.
func (c *BookCoverClient) Update() *BookCoverUpdate {
	mutation := newBookCoverMutation(c.config, OpUpdate)
	return &BookCoverUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookCoverClient) UpdateOne(bc *BookCover) *BookCoverUpdateOne {
	mutation := newBookCoverMutation(c.config, OpUpdateOne, withBookCover(bc))
	return &BookCoverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookCoverClient) UpdateOneID(id int) *BookCoverUpdateOne {
	mutation := newBookCoverMutation(c.config, OpUpdateOne, withBookCoverID(id))
	return &BookCoverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BookCover.
func (c *BookCoverClient) Delete() *BookCoverDelete {
	mutation := newBookCoverMutation(c.config, OpDelete)
	return &BookCoverDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BookCoverClient) DeleteOne(bc *BookCover) *BookCoverDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BookCoverClient) DeleteOneID(id int) *BookCoverDeleteOne {
	builder := c.Delete().Where(bookcover.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookCoverDeleteOne{builder}
}

// Query returns a query builder for BookCover.
func (c *BookCoverClient) Query() *BookCoverQuery {
	return &BookCoverQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBookCover},
		inters: c.Interceptors(),
	}
}

// Get returns a BookCover entity by its id.
func (c *BookCoverClient) Get(ctx context.Context, id int) (*BookCover, error) {
	return c.Query().Where(bookcover.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookCoverClient) GetX(ctx context.Context, id int) *BookCover {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBook queries the book edge of a BookCover.
func (c *BookCoverClient) QueryBook(bc *BookCover) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookcover.Table, bookcover.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, bookcover.BookTable, bookcover.BookColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVersions queries the versions edge of a BookCover.
func (c *BookCoverClient) QueryVersions(bc *BookCover) *CoverVersionQuery {
	query := (&CoverVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookcover.Table, bookcover.FieldID, id),
			sqlgraph.To(coverversion.Table, coverversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bookcover.VersionsTable, bookcover.VersionsColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookCoverClient) Hooks() []Hook {
	return c.hooks.BookCover
}

// Interceptors returns the client interceptors.
func (c *BookCoverClient) Interceptors() []Interceptor {
	return c.inters.BookCover
}

func (c *BookCoverClient) mutate(ctx context.Context, m *BookCoverMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BookCoverCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BookCoverUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BookCoverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BookCoverDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BookCover mutation op: %q", m.Op())
	}
}

// ChapterClient is a client for the Chapter schema.
type ChapterClient struct {
	config
}

// NewChapterClient returns a client for the Chapter from the given config.
func NewChapterClient(c config) *ChapterClient {
	return &ChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chapter.Hooks(f(g(h())))`.
func (c *ChapterClient) Use(hooks ...Hook) {
	c.hooks.Chapter = append(c.hooks.Chapter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chapter.Intercept(f(g(h())))`.
func (c *ChapterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chapter = append(c.inters.Chapter, interceptors...)
}

// Create returns a builder for creating a Chapter entity.
func (c *ChapterClient) Create() *ChapterCreate {
	mutation := newChapterMutation(c.config, OpCreate)
	return &ChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chapter entities.
func (c *ChapterClient) CreateBulk(builders ...*ChapterCreate) *ChapterCreateBulk {
	return &ChapterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChapterClient) MapCreateBulk(slice any, setFunc func(*ChapterCreate, int)) *ChapterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChapterCreateBulk{err: fmt.Errorf("calling to ChapterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChapterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chapter.
func (c *ChapterClient) Update() *ChapterUpdate {
	mutation := newChapterMutation(c.config, OpUpdate)
	return &ChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChapterClient) UpdateOne(ch *Chapter) *ChapterUpdateOne {
	mutation := newChapterMutation(c.config, OpUpdateOne, withChapter(ch))
	return &ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChapterClient) UpdateOneID(id int) *ChapterUpdateOne {
	mutation := newChapterMutation(c.config, OpUpdateOne, withChapterID(id))
	return &ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chapter.
func (c *ChapterClient) Delete() *ChapterDelete {
	mutation := newChapterMutation(c.config, OpDelete)
	return &ChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChapterClient) DeleteOne(ch *Chapter) *ChapterDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChapterClient) DeleteOneID(id int) *ChapterDeleteOne {
	builder := c.Delete().Where(chapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChapterDeleteOne{builder}
}

// Query returns a query builder for Chapter.
func (c *ChapterClient) Query() *ChapterQuery {
	return &ChapterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChapter},
		inters: c.Interceptors(),
	}
}

// Get returns a Chapter entity by its id.
func (c *ChapterClient) Get(ctx context.Context, id int) (*Chapter, error) {
	return c.Query().Where(chapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChapterClient) GetX(ctx context.Context, id int) *Chapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBook queries the book edge of a Chapter.
func (c *ChapterClient) QueryBook(ch *Chapter) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chapter.Table, chapter.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chapter.BookTable, chapter.BookColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChapterClient) Hooks() []Hook {
	return c.hooks.Chapter
}

// Interceptors returns the client interceptors.
func (c *ChapterClient) Interceptors() []Interceptor {
	return c.inters.Chapter
}

func (c *ChapterClient) mutate(ctx context.Context, m *ChapterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChapterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChapterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chapter mutation op: %q", m.Op())
	}
}

// CoverVersionClient is a client for the CoverVersion schema.
type CoverVersionClient struct {
	config
}

// NewCoverVersionClient returns a client for the CoverVersion from the given config.
func NewCoverVersionClient(c config) *CoverVersionClient {
	return &CoverVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coverversion.Hooks(f(g(h())))`.
func (c *CoverVersionClient) Use(hooks ...Hook) {
	c.hooks.CoverVersion = append(c.hooks.CoverVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coverversion.Intercept(f(g(h())))`.
func (c *CoverVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoverVersion = append(c.inters.CoverVersion, interceptors...)
}

// Create returns a builder for creating a CoverVersion entity.
func (c *CoverVersionClient) Create() *CoverVersionCreate {
	mutation := newCoverVersionMutation(c.config, OpCreate)
	return &CoverVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoverVersion entities.
func (c *CoverVersionClient) CreateBulk(builders ...*CoverVersionCreate) *CoverVersionCreateBulk {
	return &CoverVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoverVersionClient) MapCreateBulk(slice any, setFunc func(*CoverVersionCreate, int)) *CoverVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoverVersionCreateBulk{err: fmt.Errorf("calling to CoverVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoverVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoverVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoverVersion.
func (c *CoverVersionClient) Update() *CoverVersionUpdate {
	mutation := newCoverVersionMutation(c.config, OpUpdate)
	return &CoverVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoverVersionClient) UpdateOne(cv *CoverVersion) *CoverVersionUpdateOne {
	mutation := newCoverVersionMutation(c.config, OpUpdateOne, withCoverVersion(cv))
	return &CoverVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoverVersionClient) UpdateOneID(id int) *CoverVersionUpdateOne {
	mutation := newCoverVersionMutation(c.config, OpUpdateOne, withCoverVersionID(id))
	return &CoverVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoverVersion.
func (c *CoverVersionClient) Delete() *CoverVersionDelete {
	mutation := newCoverVersionMutation(c.config, OpDelete)
	return &CoverVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoverVersionClient) DeleteOne(cv *CoverVersion) *CoverVersionDeleteOne {
	return c.DeleteOneID(cv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoverVersionClient) DeleteOneID(id int) *CoverVersionDeleteOne {
	builder := c.Delete().Where(coverversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoverVersionDeleteOne{builder}
}

// Query returns a query builder for CoverVersion.
func (c *CoverVersionClient) Query() *CoverVersionQuery {
	return &CoverVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoverVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a CoverVersion entity by its id.
func (c *CoverVersionClient) Get(ctx context.Context, id int) (*CoverVersion, error) {
	return c.Query().Where(coverversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoverVersionClient) GetX(ctx context.Context, id int) *CoverVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCover queries the cover edge of a CoverVersion.
func (c *CoverVersionClient) QueryCover(cv *CoverVersion) *BookCoverQuery {
	query := (&BookCoverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coverversion.Table, coverversion.FieldID, id),
			sqlgraph.To(bookcover.Table, bookcover.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coverversion.CoverTable, coverversion.CoverColumn),
		)
		fromV = sqlgraph.Neighbors(cv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoverVersionClient) Hooks() []Hook {
	return c.hooks.CoverVersion
}

// Interceptors returns the client interceptors.
func (c *CoverVersionClient) Interceptors() []Interceptor {
	return c.inters.CoverVersion
}

func (c *CoverVersionClient) mutate(ctx context.Context, m *CoverVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoverVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoverVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoverVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoverVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CoverVersion mutation op: %q", m.Op())
	}
}

// FolderClient is a client for the Folder schema.
type FolderClient struct {
	config
}

// NewFolderClient returns a client for the Folder from the given config.
func NewFolderClient(c config) *FolderClient {
	return &FolderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `folder.Hooks(f(g(h())))`.
func (c *FolderClient) Use(hooks ...Hook) {
	c.hooks.Folder = append(c.hooks.Folder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `folder.Intercept(f(g(h())))`.
func (c *FolderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Folder = append(c.inters.Folder, interceptors...)
}

// Create returns a builder for creating a Folder entity.
func (c *FolderClient) Create() *FolderCreate {
	mutation := newFolderMutation(c.config, OpCreate)
	return &FolderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Folder entities.
func (c *FolderClient) CreateBulk(builders ...*FolderCreate) *FolderCreateBulk {
	return &FolderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FolderClient) MapCreateBulk(slice any, setFunc func(*FolderCreate, int)) *FolderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FolderCreateBulk{err: fmt.Errorf("calling to FolderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FolderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FolderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Folder.
func (c *FolderClient) Update() *FolderUpdate {
	mutation := newFolderMutation(c.config, OpUpdate)
	return &FolderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FolderClient) UpdateOne(f *Folder) *FolderUpdateOne {
	mutation := newFolderMutation(c.config, OpUpdateOne, withFolder(f))
	return &FolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FolderClient) UpdateOneID(id string) *FolderUpdateOne {
	mutation := newFolderMutation(c.config, OpUpdateOne, withFolderID(id))
	return &FolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Folder.
func (c *FolderClient) Delete() *FolderDelete {
	mutation := newFolderMutation(c.config, OpDelete)
	return &FolderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FolderClient) DeleteOne(f *Folder) *FolderDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FolderClient) DeleteOneID(id string) *FolderDeleteOne {
	builder := c.Delete().Where(folder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FolderDeleteOne{builder}
}

// Query returns a query builder for Folder.
func (c *FolderClient) Query() *FolderQuery {
	return &FolderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFolder},
		inters: c.Interceptors(),
	}
}

// Get returns a Folder entity by its id.
func (c *FolderClient) Get(ctx context.Context, id string) (*Folder, error) {
	return c.Query().Where(folder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FolderClient) GetX(ctx context.Context, id string) *Folder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLibraries queries the libraries edge of a Folder.
func (c *FolderClient) QueryLibraries(f *Folder) *LibraryQuery {
	query := (&LibraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(folder.Table, folder.FieldID, id),
			sqlgraph.To(library.Table, library.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, folder.LibrariesTable, folder.LibrariesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBooks queries the books edge of a Folder.
func (c *FolderClient) QueryBooks(f *Folder) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(folder.Table, folder.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, folder.BooksTable, folder.BooksColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FolderClient) Hooks() []Hook {
	return c.hooks.Folder
}

// Interceptors returns the client interceptors.
func (c *FolderClient) Interceptors() []Interceptor {
	return c.inters.Folder
}

func (c *FolderClient) mutate(ctx context.Context, m *FolderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FolderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FolderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FolderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Folder mutation op: %q", m.Op())
	}
}

// LibraryClient is a client for the Library schema.
type LibraryClient struct {
	config
}

// NewLibraryClient returns a client for the Library from the given config.
func NewLibraryClient(c config) *LibraryClient {
	return &LibraryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `library.Hooks(f(g(h())))`.
func (c *LibraryClient) Use(hooks ...Hook) {
	c.hooks.Library = append(c.hooks.Library, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `library.Intercept(f(g(h())))`.
func (c *LibraryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Library = append(c.inters.Library, interceptors...)
}

// Create returns a builder for creating a Library entity.
func (c *LibraryClient) Create() *LibraryCreate {
	mutation := newLibraryMutation(c.config, OpCreate)
	return &LibraryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Library entities.
func (c *LibraryClient) CreateBulk(builders ...*LibraryCreate) *LibraryCreateBulk {
	return &LibraryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LibraryClient) MapCreateBulk(slice any, setFunc func(*LibraryCreate, int)) *LibraryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LibraryCreateBulk{err: fmt.Errorf("calling to LibraryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LibraryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LibraryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Library.
func (c *LibraryClient) Update() *LibraryUpdate {
	mutation := newLibraryMutation(c.config, OpUpdate)
	return &LibraryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LibraryClient) UpdateOne(l *Library) *LibraryUpdateOne {
	mutation := newLibraryMutation(c.config, OpUpdateOne, withLibrary(l))
	return &LibraryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LibraryClient) UpdateOneID(id string) *LibraryUpdateOne {
	mutation := newLibraryMutation(c.config, OpUpdateOne, withLibraryID(id))
	return &LibraryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Library.
func (c *LibraryClient) Delete() *LibraryDelete {
	mutation := newLibraryMutation(c.config, OpDelete)
	return &LibraryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LibraryClient) DeleteOne(l *Library) *LibraryDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LibraryClient) DeleteOneID(id string) *LibraryDeleteOne {
	builder := c.Delete().Where(library.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LibraryDeleteOne{builder}
}

// Query returns a query builder for Library.
func (c *LibraryClient) Query() *LibraryQuery {
	return &LibraryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLibrary},
		inters: c.Interceptors(),
	}
}

// Get returns a Library entity by its id.
func (c *LibraryClient) Get(ctx context.Context, id string) (*Library, error) {
	return c.Query().Where(library.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LibraryClient) GetX(ctx context.Context, id string) *Library {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Library.
func (c *LibraryClient) QueryUsers(l *Library) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(library.Table, library.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, library.UsersTable, library.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActiveUsers queries the active_users edge of a Library.
func (c *LibraryClient) QueryActiveUsers(l *Library) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(library.Table, library.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, library.ActiveUsersTable, library.ActiveUsersColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFolders queries the folders edge of a Library.
func (c *LibraryClient) QueryFolders(l *Library) *FolderQuery {
	query := (&FolderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(library.Table, library.FieldID, id),
			sqlgraph.To(folder.Table, folder.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, library.FoldersTable, library.FoldersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLibraryBooks queries the library_books edge of a Library.
func (c *LibraryClient) QueryLibraryBooks(l *Library) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(library.Table, library.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, library.LibraryBooksTable, library.LibraryBooksColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LibraryClient) Hooks() []Hook {
	return c.hooks.Library
}

// Interceptors returns the client interceptors.
func (c *LibraryClient) Interceptors() []Interceptor {
	return c.inters.Library
}

func (c *LibraryClient) mutate(ctx context.Context, m *LibraryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LibraryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LibraryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LibraryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LibraryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Library mutation op: %q", m.Op())
	}
}

// NarratorClient is a client for the Narrator schema.
type NarratorClient struct {
	config
}

// NewNarratorClient returns a client for the Narrator from the given config.
func NewNarratorClient(c config) *NarratorClient {
	return &NarratorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `narrator.Hooks(f(g(h())))`.
func (c *NarratorClient) Use(hooks ...Hook) {
	c.hooks.Narrator = append(c.hooks.Narrator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `narrator.Intercept(f(g(h())))`.
func (c *NarratorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Narrator = append(c.inters.Narrator, interceptors...)
}

// Create returns a builder for creating a Narrator entity.
func (c *NarratorClient) Create() *NarratorCreate {
	mutation := newNarratorMutation(c.config, OpCreate)
	return &NarratorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Narrator entities.
func (c *NarratorClient) CreateBulk(builders ...*NarratorCreate) *NarratorCreateBulk {
	return &NarratorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NarratorClient) MapCreateBulk(slice any, setFunc func(*NarratorCreate, int)) *NarratorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NarratorCreateBulk{err: fmt.Errorf("calling to NarratorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NarratorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NarratorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Narrator.
func (c *NarratorClient) Update() *NarratorUpdate {
	mutation := newNarratorMutation(c.config, OpUpdate)
	return &NarratorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NarratorClient) UpdateOne(n *Narrator) *NarratorUpdateOne {
	mutation := newNarratorMutation(c.config, OpUpdateOne, withNarrator(n))
	return &NarratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NarratorClient) UpdateOneID(id string) *NarratorUpdateOne {
	mutation := newNarratorMutation(c.config, OpUpdateOne, withNarratorID(id))
	return &NarratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Narrator.
func (c *NarratorClient) Delete() *NarratorDelete {
	mutation := newNarratorMutation(c.config, OpDelete)
	return &NarratorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NarratorClient) DeleteOne(n *Narrator) *NarratorDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NarratorClient) DeleteOneID(id string) *NarratorDeleteOne {
	builder := c.Delete().Where(narrator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NarratorDeleteOne{builder}
}

// Query returns a query builder for Narrator.
func (c *NarratorClient) Query() *NarratorQuery {
	return &NarratorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNarrator},
		inters: c.Interceptors(),
	}
}

// Get returns a Narrator entity by its id.
func (c *NarratorClient) Get(ctx context.Context, id string) (*Narrator, error) {
	return c.Query().Where(narrator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NarratorClient) GetX(ctx context.Context, id string) *Narrator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBooks queries the books edge of a Narrator.
func (c *NarratorClient) QueryBooks(n *Narrator) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(narrator.Table, narrator.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, narrator.BooksTable, narrator.BooksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NarratorClient) Hooks() []Hook {
	return c.hooks.Narrator
}

// Interceptors returns the client interceptors.
func (c *NarratorClient) Interceptors() []Interceptor {
	return c.inters.Narrator
}

func (c *NarratorClient) mutate(ctx context.Context, m *NarratorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NarratorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NarratorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NarratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NarratorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Narrator mutation op: %q", m.Op())
	}
}

// SeriesClient is a client for the Series schema.
type SeriesClient struct {
	config
}

// NewSeriesClient returns a client for the Series from the given config.
func NewSeriesClient(c config) *SeriesClient {
	return &SeriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `series.Hooks(f(g(h())))`.
func (c *SeriesClient) Use(hooks ...Hook) {
	c.hooks.Series = append(c.hooks.Series, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `series.Intercept(f(g(h())))`.
func (c *SeriesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Series = append(c.inters.Series, interceptors...)
}

// Create returns a builder for creating a Series entity.
func (c *SeriesClient) Create() *SeriesCreate {
	mutation := newSeriesMutation(c.config, OpCreate)
	return &SeriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Series entities.
func (c *SeriesClient) CreateBulk(builders ...*SeriesCreate) *SeriesCreateBulk {
	return &SeriesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SeriesClient) MapCreateBulk(slice any, setFunc func(*SeriesCreate, int)) *SeriesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SeriesCreateBulk{err: fmt.Errorf("calling to SeriesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SeriesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SeriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Series.
func (c *SeriesClient) Update() *SeriesUpdate {
	mutation := newSeriesMutation(c.config, OpUpdate)
	return &SeriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeriesClient) UpdateOne(s *Series) *SeriesUpdateOne {
	mutation := newSeriesMutation(c.config, OpUpdateOne, withSeries(s))
	return &SeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeriesClient) UpdateOneID(id string) *SeriesUpdateOne {
	mutation := newSeriesMutation(c.config, OpUpdateOne, withSeriesID(id))
	return &SeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Series.
func (c *SeriesClient) Delete() *SeriesDelete {
	mutation := newSeriesMutation(c.config, OpDelete)
	return &SeriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SeriesClient) DeleteOne(s *Series) *SeriesDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SeriesClient) DeleteOneID(id string) *SeriesDeleteOne {
	builder := c.Delete().Where(series.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeriesDeleteOne{builder}
}

// Query returns a query builder for Series.
func (c *SeriesClient) Query() *SeriesQuery {
	return &SeriesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSeries},
		inters: c.Interceptors(),
	}
}

// Get returns a Series entity by its id.
func (c *SeriesClient) Get(ctx context.Context, id string) (*Series, error) {
	return c.Query().Where(series.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeriesClient) GetX(ctx context.Context, id string) *Series {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySeriesBooks queries the series_books edge of a Series.
func (c *SeriesClient) QuerySeriesBooks(s *Series) *SeriesBookQuery {
	query := (&SeriesBookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(series.Table, series.FieldID, id),
			sqlgraph.To(seriesbook.Table, seriesbook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, series.SeriesBooksTable, series.SeriesBooksColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeriesClient) Hooks() []Hook {
	return c.hooks.Series
}

// Interceptors returns the client interceptors.
func (c *SeriesClient) Interceptors() []Interceptor {
	return c.inters.Series
}

func (c *SeriesClient) mutate(ctx context.Context, m *SeriesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SeriesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SeriesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SeriesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Series mutation op: %q", m.Op())
	}
}

// SeriesBookClient is a client for the SeriesBook schema.
type SeriesBookClient struct {
	config
}

// NewSeriesBookClient returns a client for the SeriesBook from the given config.
func NewSeriesBookClient(c config) *SeriesBookClient {
	return &SeriesBookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `seriesbook.Hooks(f(g(h())))`.
func (c *SeriesBookClient) Use(hooks ...Hook) {
	c.hooks.SeriesBook = append(c.hooks.SeriesBook, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `seriesbook.Intercept(f(g(h())))`.
func (c *SeriesBookClient) Intercept(interceptors ...Interceptor) {
	c.inters.SeriesBook = append(c.inters.SeriesBook, interceptors...)
}

// Create returns a builder for creating a SeriesBook entity.
func (c *SeriesBookClient) Create() *SeriesBookCreate {
	mutation := newSeriesBookMutation(c.config, OpCreate)
	return &SeriesBookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SeriesBook entities.
func (c *SeriesBookClient) CreateBulk(builders ...*SeriesBookCreate) *SeriesBookCreateBulk {
	return &SeriesBookCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SeriesBookClient) MapCreateBulk(slice any, setFunc func(*SeriesBookCreate, int)) *SeriesBookCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SeriesBookCreateBulk{err: fmt.Errorf("calling to SeriesBookClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SeriesBookCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SeriesBookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SeriesBook.
func (c *SeriesBookClient) Update() *SeriesBookUpdate {
	mutation := newSeriesBookMutation(c.config, OpUpdate)
	return &SeriesBookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeriesBookClient) UpdateOne(sb *SeriesBook) *SeriesBookUpdateOne {
	mutation := newSeriesBookMutation(c.config, OpUpdateOne, withSeriesBook(sb))
	return &SeriesBookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeriesBookClient) UpdateOneID(id int) *SeriesBookUpdateOne {
	mutation := newSeriesBookMutation(c.config, OpUpdateOne, withSeriesBookID(id))
	return &SeriesBookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SeriesBook.
func (c *SeriesBookClient) Delete() *SeriesBookDelete {
	mutation := newSeriesBookMutation(c.config, OpDelete)
	return &SeriesBookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SeriesBookClient) DeleteOne(sb *SeriesBook) *SeriesBookDeleteOne {
	return c.DeleteOneID(sb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SeriesBookClient) DeleteOneID(id int) *SeriesBookDeleteOne {
	builder := c.Delete().Where(seriesbook.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeriesBookDeleteOne{builder}
}

// Query returns a query builder for SeriesBook.
func (c *SeriesBookClient) Query() *SeriesBookQuery {
	return &SeriesBookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSeriesBook},
		inters: c.Interceptors(),
	}
}

// Get returns a SeriesBook entity by its id.
func (c *SeriesBookClient) Get(ctx context.Context, id int) (*SeriesBook, error) {
	return c.Query().Where(seriesbook.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeriesBookClient) GetX(ctx context.Context, id int) *SeriesBook {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySeries queries the series edge of a SeriesBook.
func (c *SeriesBookClient) QuerySeries(sb *SeriesBook) *SeriesQuery {
	query := (&SeriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seriesbook.Table, seriesbook.FieldID, id),
			sqlgraph.To(series.Table, series.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, seriesbook.SeriesTable, seriesbook.SeriesColumn),
		)
		fromV = sqlgraph.Neighbors(sb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBook queries the book edge of a SeriesBook.
func (c *SeriesBookClient) QueryBook(sb *SeriesBook) *BookQuery {
	query := (&BookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seriesbook.Table, seriesbook.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, seriesbook.BookTable, seriesbook.BookColumn),
		)
		fromV = sqlgraph.Neighbors(sb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeriesBookClient) Hooks() []Hook {
	return c.hooks.SeriesBook
}

// Interceptors returns the client interceptors.
func (c *SeriesBookClient) Interceptors() []Interceptor {
	return c.inters.SeriesBook
}

func (c *SeriesBookClient) mutate(ctx context.Context, m *SeriesBookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SeriesBookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SeriesBookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SeriesBookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SeriesBookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SeriesBook mutation op: %q", m.Op())
	}
}

// ServerClient is a client for the Server schema.
type ServerClient struct {
	config
}

// NewServerClient returns a client for the Server from the given config.
func NewServerClient(c config) *ServerClient {
	return &ServerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `server.Hooks(f(g(h())))`.
func (c *ServerClient) Use(hooks ...Hook) {
	c.hooks.Server = append(c.hooks.Server, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `server.Intercept(f(g(h())))`.
func (c *ServerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Server = append(c.inters.Server, interceptors...)
}

// Create returns a builder for creating a Server entity.
func (c *ServerClient) Create() *ServerCreate {
	mutation := newServerMutation(c.config, OpCreate)
	return &ServerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Server entities.
func (c *ServerClient) CreateBulk(builders ...*ServerCreate) *ServerCreateBulk {
	return &ServerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServerClient) MapCreateBulk(slice any, setFunc func(*ServerCreate, int)) *ServerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServerCreateBulk{err: fmt.Errorf("calling to ServerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Server.
func (c *ServerClient) Update() *ServerUpdate {
	mutation := newServerMutation(c.config, OpUpdate)
	return &ServerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerClient) UpdateOne(s *Server) *ServerUpdateOne {
	mutation := newServerMutation(c.config, OpUpdateOne, withServer(s))
	return &ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerClient) UpdateOneID(id int) *ServerUpdateOne {
	mutation := newServerMutation(c.config, OpUpdateOne, withServerID(id))
	return &ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Server.
func (c *ServerClient) Delete() *ServerDelete {
	mutation := newServerMutation(c.config, OpDelete)
	return &ServerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerClient) DeleteOne(s *Server) *ServerDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerClient) DeleteOneID(id int) *ServerDeleteOne {
	builder := c.Delete().Where(server.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerDeleteOne{builder}
}

// Query returns a query builder for Server.
func (c *ServerClient) Query() *ServerQuery {
	return &ServerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServer},
		inters: c.Interceptors(),
	}
}

// Get returns a Server entity by its id.
func (c *ServerClient) Get(ctx context.Context, id int) (*Server, error) {
	return c.Query().Where(server.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerClient) GetX(ctx context.Context, id int) *Server {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfig queries the config edge of a Server.
func (c *ServerClient) QueryConfig(s *Server) *ServerConfigQuery {
	query := (&ServerConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(server.Table, server.FieldID, id),
			sqlgraph.To(serverconfig.Table, serverconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, server.ConfigTable, server.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerClient) Hooks() []Hook {
	return c.hooks.Server
}

// Interceptors returns the client interceptors.
func (c *ServerClient) Interceptors() []Interceptor {
	return c.inters.Server
}

func (c *ServerClient) mutate(ctx context.Context, m *ServerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Server mutation op: %q", m.Op())
	}
}

// ServerConfigClient is a client for the ServerConfig schema.
type ServerConfigClient struct {
	config
}

// NewServerConfigClient returns a client for the ServerConfig from the given config.
func NewServerConfigClient(c config) *ServerConfigClient {
	return &ServerConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverconfig.Hooks(f(g(h())))`.
func (c *ServerConfigClient) Use(hooks ...Hook) {
	c.hooks.ServerConfig = append(c.hooks.ServerConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverconfig.Intercept(f(g(h())))`.
func (c *ServerConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerConfig = append(c.inters.ServerConfig, interceptors...)
}

// Create returns a builder for creating a ServerConfig entity.
func (c *ServerConfigClient) Create() *ServerConfigCreate {
	mutation := newServerConfigMutation(c.config, OpCreate)
	return &ServerConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerConfig entities.
func (c *ServerConfigClient) CreateBulk(builders ...*ServerConfigCreate) *ServerConfigCreateBulk {
	return &ServerConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServerConfigClient) MapCreateBulk(slice any, setFunc func(*ServerConfigCreate, int)) *ServerConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServerConfigCreateBulk{err: fmt.Errorf("calling to ServerConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServerConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServerConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerConfig.
func (c *ServerConfigClient) Update() *ServerConfigUpdate {
	mutation := newServerConfigMutation(c.config, OpUpdate)
	return &ServerConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerConfigClient) UpdateOne(sc *ServerConfig) *ServerConfigUpdateOne {
	mutation := newServerConfigMutation(c.config, OpUpdateOne, withServerConfig(sc))
	return &ServerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerConfigClient) UpdateOneID(id int) *ServerConfigUpdateOne {
	mutation := newServerConfigMutation(c.config, OpUpdateOne, withServerConfigID(id))
	return &ServerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerConfig.
func (c *ServerConfigClient) Delete() *ServerConfigDelete {
	mutation := newServerConfigMutation(c.config, OpDelete)
	return &ServerConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerConfigClient) DeleteOne(sc *ServerConfig) *ServerConfigDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerConfigClient) DeleteOneID(id int) *ServerConfigDeleteOne {
	builder := c.Delete().Where(serverconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerConfigDeleteOne{builder}
}

// Query returns a query builder for ServerConfig.
func (c *ServerConfigClient) Query() *ServerConfigQuery {
	return &ServerConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerConfig entity by its id.
func (c *ServerConfigClient) Get(ctx context.Context, id int) (*ServerConfig, error) {
	return c.Query().Where(serverconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerConfigClient) GetX(ctx context.Context, id int) *ServerConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerConfig.
func (c *ServerConfigClient) QueryServer(sc *ServerConfig) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverconfig.Table, serverconfig.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, serverconfig.ServerTable, serverconfig.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerConfigClient) Hooks() []Hook {
	return c.hooks.ServerConfig
}

// Interceptors returns the client interceptors.
func (c *ServerConfigClient) Interceptors() []Interceptor {
	return c.inters.ServerConfig
}

func (c *ServerConfigClient) mutate(ctx context.Context, m *ServerConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServerConfig mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLibraries queries the libraries edge of a User.
func (c *UserClient) QueryLibraries(u *User) *LibraryQuery {
	query := (&LibraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(library.Table, library.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LibrariesTable, user.LibrariesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActiveLibrary queries the active_library edge of a User.
func (c *UserClient) QueryActiveLibrary(u *User) *LibraryQuery {
	query := (&LibraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(library.Table, library.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.ActiveLibraryTable, user.ActiveLibraryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Author, Book, BookCover, Chapter, CoverVersion, Folder, Library, Narrator,
		Series, SeriesBook, Server, ServerConfig, User []ent.Hook
	}
	inters struct {
		Author, Book, BookCover, Chapter, CoverVersion, Folder, Library, Narrator,
		Series, SeriesBook, Server, ServerConfig, User []ent.Interceptor
	}
)
