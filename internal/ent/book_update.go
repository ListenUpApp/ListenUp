// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/author"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/chapter"
	"github.com/ListenUpApp/ListenUp/internal/ent/folder"
	"github.com/ListenUpApp/ListenUp/internal/ent/library"
	"github.com/ListenUpApp/ListenUp/internal/ent/narrator"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetDuration sets the "duration" field.
func (bu *BookUpdate) SetDuration(f float64) *BookUpdate {
	bu.mutation.ResetDuration()
	bu.mutation.SetDuration(f)
	return bu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (bu *BookUpdate) SetNillableDuration(f *float64) *BookUpdate {
	if f != nil {
		bu.SetDuration(*f)
	}
	return bu
}

// AddDuration adds f to the "duration" field.
func (bu *BookUpdate) AddDuration(f float64) *BookUpdate {
	bu.mutation.AddDuration(f)
	return bu
}

// SetSize sets the "size" field.
func (bu *BookUpdate) SetSize(i int64) *BookUpdate {
	bu.mutation.ResetSize()
	bu.mutation.SetSize(i)
	return bu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bu *BookUpdate) SetNillableSize(i *int64) *BookUpdate {
	if i != nil {
		bu.SetSize(*i)
	}
	return bu
}

// AddSize adds i to the "size" field.
func (bu *BookUpdate) AddSize(i int64) *BookUpdate {
	bu.mutation.AddSize(i)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BookUpdate) SetTitle(s string) *BookUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BookUpdate) SetNillableTitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetSubtitle sets the "subtitle" field.
func (bu *BookUpdate) SetSubtitle(s string) *BookUpdate {
	bu.mutation.SetSubtitle(s)
	return bu
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (bu *BookUpdate) SetNillableSubtitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetSubtitle(*s)
	}
	return bu
}

// ClearSubtitle clears the value of the "subtitle" field.
func (bu *BookUpdate) ClearSubtitle() *BookUpdate {
	bu.mutation.ClearSubtitle()
	return bu
}

// SetDescription sets the "description" field.
func (bu *BookUpdate) SetDescription(s string) *BookUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BookUpdate) SetNillableDescription(s *string) *BookUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// ClearDescription clears the value of the "description" field.
func (bu *BookUpdate) ClearDescription() *BookUpdate {
	bu.mutation.ClearDescription()
	return bu
}

// SetIsbn sets the "isbn" field.
func (bu *BookUpdate) SetIsbn(s string) *BookUpdate {
	bu.mutation.SetIsbn(s)
	return bu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bu *BookUpdate) SetNillableIsbn(s *string) *BookUpdate {
	if s != nil {
		bu.SetIsbn(*s)
	}
	return bu
}

// ClearIsbn clears the value of the "isbn" field.
func (bu *BookUpdate) ClearIsbn() *BookUpdate {
	bu.mutation.ClearIsbn()
	return bu
}

// SetAsin sets the "asin" field.
func (bu *BookUpdate) SetAsin(s string) *BookUpdate {
	bu.mutation.SetAsin(s)
	return bu
}

// SetNillableAsin sets the "asin" field if the given value is not nil.
func (bu *BookUpdate) SetNillableAsin(s *string) *BookUpdate {
	if s != nil {
		bu.SetAsin(*s)
	}
	return bu
}

// ClearAsin clears the value of the "asin" field.
func (bu *BookUpdate) ClearAsin() *BookUpdate {
	bu.mutation.ClearAsin()
	return bu
}

// SetLanguage sets the "language" field.
func (bu *BookUpdate) SetLanguage(s string) *BookUpdate {
	bu.mutation.SetLanguage(s)
	return bu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (bu *BookUpdate) SetNillableLanguage(s *string) *BookUpdate {
	if s != nil {
		bu.SetLanguage(*s)
	}
	return bu
}

// ClearLanguage clears the value of the "language" field.
func (bu *BookUpdate) ClearLanguage() *BookUpdate {
	bu.mutation.ClearLanguage()
	return bu
}

// SetExplicit sets the "explicit" field.
func (bu *BookUpdate) SetExplicit(b bool) *BookUpdate {
	bu.mutation.SetExplicit(b)
	return bu
}

// SetNillableExplicit sets the "explicit" field if the given value is not nil.
func (bu *BookUpdate) SetNillableExplicit(b *bool) *BookUpdate {
	if b != nil {
		bu.SetExplicit(*b)
	}
	return bu
}

// SetPublisher sets the "publisher" field.
func (bu *BookUpdate) SetPublisher(s string) *BookUpdate {
	bu.mutation.SetPublisher(s)
	return bu
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublisher(s *string) *BookUpdate {
	if s != nil {
		bu.SetPublisher(*s)
	}
	return bu
}

// ClearPublisher clears the value of the "publisher" field.
func (bu *BookUpdate) ClearPublisher() *BookUpdate {
	bu.mutation.ClearPublisher()
	return bu
}

// SetPublishedDate sets the "published_date" field.
func (bu *BookUpdate) SetPublishedDate(t time.Time) *BookUpdate {
	bu.mutation.SetPublishedDate(t)
	return bu
}

// SetNillablePublishedDate sets the "published_date" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublishedDate(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetPublishedDate(*t)
	}
	return bu
}

// ClearPublishedDate clears the value of the "published_date" field.
func (bu *BookUpdate) ClearPublishedDate() *BookUpdate {
	bu.mutation.ClearPublishedDate()
	return bu
}

// SetGenres sets the "genres" field.
func (bu *BookUpdate) SetGenres(s []string) *BookUpdate {
	bu.mutation.SetGenres(s)
	return bu
}

// AppendGenres appends s to the "genres" field.
func (bu *BookUpdate) AppendGenres(s []string) *BookUpdate {
	bu.mutation.AppendGenres(s)
	return bu
}

// ClearGenres clears the value of the "genres" field.
func (bu *BookUpdate) ClearGenres() *BookUpdate {
	bu.mutation.ClearGenres()
	return bu
}

// SetTags sets the "tags" field.
func (bu *BookUpdate) SetTags(s []string) *BookUpdate {
	bu.mutation.SetTags(s)
	return bu
}

// AppendTags appends s to the "tags" field.
func (bu *BookUpdate) AppendTags(s []string) *BookUpdate {
	bu.mutation.AppendTags(s)
	return bu
}

// ClearTags clears the value of the "tags" field.
func (bu *BookUpdate) ClearTags() *BookUpdate {
	bu.mutation.ClearTags()
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BookUpdate) SetUpdatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (bu *BookUpdate) AddChapterIDs(ids ...int) *BookUpdate {
	bu.mutation.AddChapterIDs(ids...)
	return bu
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (bu *BookUpdate) AddChapters(c ...*Chapter) *BookUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddChapterIDs(ids...)
}

// SetCoverID sets the "cover" edge to the BookCover entity by ID.
func (bu *BookUpdate) SetCoverID(id int) *BookUpdate {
	bu.mutation.SetCoverID(id)
	return bu
}

// SetNillableCoverID sets the "cover" edge to the BookCover entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableCoverID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetCoverID(*id)
	}
	return bu
}

// SetCover sets the "cover" edge to the BookCover entity.
func (bu *BookUpdate) SetCover(b *BookCover) *BookUpdate {
	return bu.SetCoverID(b.ID)
}

// AddAuthorIDs adds the "authors" edge to the Author entity by IDs.
func (bu *BookUpdate) AddAuthorIDs(ids ...string) *BookUpdate {
	bu.mutation.AddAuthorIDs(ids...)
	return bu
}

// AddAuthors adds the "authors" edges to the Author entity.
func (bu *BookUpdate) AddAuthors(a ...*Author) *BookUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddAuthorIDs(ids...)
}

// AddNarratorIDs adds the "narrators" edge to the Narrator entity by IDs.
func (bu *BookUpdate) AddNarratorIDs(ids ...string) *BookUpdate {
	bu.mutation.AddNarratorIDs(ids...)
	return bu
}

// AddNarrators adds the "narrators" edges to the Narrator entity.
func (bu *BookUpdate) AddNarrators(n ...*Narrator) *BookUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bu.AddNarratorIDs(ids...)
}

// SetLibraryID sets the "library" edge to the Library entity by ID.
func (bu *BookUpdate) SetLibraryID(id string) *BookUpdate {
	bu.mutation.SetLibraryID(id)
	return bu
}

// SetLibrary sets the "library" edge to the Library entity.
func (bu *BookUpdate) SetLibrary(l *Library) *BookUpdate {
	return bu.SetLibraryID(l.ID)
}

// SetFolderID sets the "folder" edge to the Folder entity by ID.
func (bu *BookUpdate) SetFolderID(id string) *BookUpdate {
	bu.mutation.SetFolderID(id)
	return bu
}

// SetFolder sets the "folder" edge to the Folder entity.
func (bu *BookUpdate) SetFolder(f *Folder) *BookUpdate {
	return bu.SetFolderID(f.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (bu *BookUpdate) ClearChapters() *BookUpdate {
	bu.mutation.ClearChapters()
	return bu
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (bu *BookUpdate) RemoveChapterIDs(ids ...int) *BookUpdate {
	bu.mutation.RemoveChapterIDs(ids...)
	return bu
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (bu *BookUpdate) RemoveChapters(c ...*Chapter) *BookUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveChapterIDs(ids...)
}

// ClearCover clears the "cover" edge to the BookCover entity.
func (bu *BookUpdate) ClearCover() *BookUpdate {
	bu.mutation.ClearCover()
	return bu
}

// ClearAuthors clears all "authors" edges to the Author entity.
func (bu *BookUpdate) ClearAuthors() *BookUpdate {
	bu.mutation.ClearAuthors()
	return bu
}

// RemoveAuthorIDs removes the "authors" edge to Author entities by IDs.
func (bu *BookUpdate) RemoveAuthorIDs(ids ...string) *BookUpdate {
	bu.mutation.RemoveAuthorIDs(ids...)
	return bu
}

// RemoveAuthors removes "authors" edges to Author entities.
func (bu *BookUpdate) RemoveAuthors(a ...*Author) *BookUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveAuthorIDs(ids...)
}

// ClearNarrators clears all "narrators" edges to the Narrator entity.
func (bu *BookUpdate) ClearNarrators() *BookUpdate {
	bu.mutation.ClearNarrators()
	return bu
}

// RemoveNarratorIDs removes the "narrators" edge to Narrator entities by IDs.
func (bu *BookUpdate) RemoveNarratorIDs(ids ...string) *BookUpdate {
	bu.mutation.RemoveNarratorIDs(ids...)
	return bu
}

// RemoveNarrators removes "narrators" edges to Narrator entities.
func (bu *BookUpdate) RemoveNarrators(n ...*Narrator) *BookUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bu.RemoveNarratorIDs(ids...)
}

// ClearLibrary clears the "library" edge to the Library entity.
func (bu *BookUpdate) ClearLibrary() *BookUpdate {
	bu.mutation.ClearLibrary()
	return bu
}

// ClearFolder clears the "folder" edge to the Folder entity.
func (bu *BookUpdate) ClearFolder() *BookUpdate {
	bu.mutation.ClearFolder()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BookUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := book.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookUpdate) check() error {
	if bu.mutation.LibraryCleared() && len(bu.mutation.LibraryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Book.library"`)
	}
	if bu.mutation.FolderCleared() && len(bu.mutation.FolderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Book.folder"`)
	}
	return nil
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeString))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Duration(); ok {
		_spec.SetField(book.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedDuration(); ok {
		_spec.AddField(book.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.Size(); ok {
		_spec.SetField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedSize(); ok {
		_spec.AddField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Subtitle(); ok {
		_spec.SetField(book.FieldSubtitle, field.TypeString, value)
	}
	if bu.mutation.SubtitleCleared() {
		_spec.ClearField(book.FieldSubtitle, field.TypeString)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.DescriptionCleared() {
		_spec.ClearField(book.FieldDescription, field.TypeString)
	}
	if value, ok := bu.mutation.Isbn(); ok {
		_spec.SetField(book.FieldIsbn, field.TypeString, value)
	}
	if bu.mutation.IsbnCleared() {
		_spec.ClearField(book.FieldIsbn, field.TypeString)
	}
	if value, ok := bu.mutation.Asin(); ok {
		_spec.SetField(book.FieldAsin, field.TypeString, value)
	}
	if bu.mutation.AsinCleared() {
		_spec.ClearField(book.FieldAsin, field.TypeString)
	}
	if value, ok := bu.mutation.Language(); ok {
		_spec.SetField(book.FieldLanguage, field.TypeString, value)
	}
	if bu.mutation.LanguageCleared() {
		_spec.ClearField(book.FieldLanguage, field.TypeString)
	}
	if value, ok := bu.mutation.Explicit(); ok {
		_spec.SetField(book.FieldExplicit, field.TypeBool, value)
	}
	if value, ok := bu.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
	}
	if bu.mutation.PublisherCleared() {
		_spec.ClearField(book.FieldPublisher, field.TypeString)
	}
	if value, ok := bu.mutation.PublishedDate(); ok {
		_spec.SetField(book.FieldPublishedDate, field.TypeTime, value)
	}
	if bu.mutation.PublishedDateCleared() {
		_spec.ClearField(book.FieldPublishedDate, field.TypeTime)
	}
	if value, ok := bu.mutation.Genres(); ok {
		_spec.SetField(book.FieldGenres, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedGenres(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldGenres, value)
		})
	}
	if bu.mutation.GenresCleared() {
		_spec.ClearField(book.FieldGenres, field.TypeJSON)
	}
	if value, ok := bu.mutation.Tags(); ok {
		_spec.SetField(book.FieldTags, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldTags, value)
		})
	}
	if bu.mutation.TagsCleared() {
		_spec.ClearField(book.FieldTags, field.TypeJSON)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.ChaptersTable,
			Columns: []string{book.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !bu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.ChaptersTable,
			Columns: []string{book.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.ChaptersTable,
			Columns: []string{book.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   book.CoverTable,
			Columns: []string{book.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   book.CoverTable,
			Columns: []string{book.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(author.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !bu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(author.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(author.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.NarratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.NarratorsTable,
			Columns: book.NarratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedNarratorsIDs(); len(nodes) > 0 && !bu.mutation.NarratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.NarratorsTable,
			Columns: book.NarratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.NarratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.NarratorsTable,
			Columns: book.NarratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(library.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(library.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.FolderTable,
			Columns: []string{book.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.FolderTable,
			Columns: []string{book.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetDuration sets the "duration" field.
func (buo *BookUpdateOne) SetDuration(f float64) *BookUpdateOne {
	buo.mutation.ResetDuration()
	buo.mutation.SetDuration(f)
	return buo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDuration(f *float64) *BookUpdateOne {
	if f != nil {
		buo.SetDuration(*f)
	}
	return buo
}

// AddDuration adds f to the "duration" field.
func (buo *BookUpdateOne) AddDuration(f float64) *BookUpdateOne {
	buo.mutation.AddDuration(f)
	return buo
}

// SetSize sets the "size" field.
func (buo *BookUpdateOne) SetSize(i int64) *BookUpdateOne {
	buo.mutation.ResetSize()
	buo.mutation.SetSize(i)
	return buo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableSize(i *int64) *BookUpdateOne {
	if i != nil {
		buo.SetSize(*i)
	}
	return buo
}

// AddSize adds i to the "size" field.
func (buo *BookUpdateOne) AddSize(i int64) *BookUpdateOne {
	buo.mutation.AddSize(i)
	return buo
}

// SetTitle sets the "title" field.
func (buo *BookUpdateOne) SetTitle(s string) *BookUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableTitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetSubtitle sets the "subtitle" field.
func (buo *BookUpdateOne) SetSubtitle(s string) *BookUpdateOne {
	buo.mutation.SetSubtitle(s)
	return buo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableSubtitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetSubtitle(*s)
	}
	return buo
}

// ClearSubtitle clears the value of the "subtitle" field.
func (buo *BookUpdateOne) ClearSubtitle() *BookUpdateOne {
	buo.mutation.ClearSubtitle()
	return buo
}

// SetDescription sets the "description" field.
func (buo *BookUpdateOne) SetDescription(s string) *BookUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDescription(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// ClearDescription clears the value of the "description" field.
func (buo *BookUpdateOne) ClearDescription() *BookUpdateOne {
	buo.mutation.ClearDescription()
	return buo
}

// SetIsbn sets the "isbn" field.
func (buo *BookUpdateOne) SetIsbn(s string) *BookUpdateOne {
	buo.mutation.SetIsbn(s)
	return buo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableIsbn(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetIsbn(*s)
	}
	return buo
}

// ClearIsbn clears the value of the "isbn" field.
func (buo *BookUpdateOne) ClearIsbn() *BookUpdateOne {
	buo.mutation.ClearIsbn()
	return buo
}

// SetAsin sets the "asin" field.
func (buo *BookUpdateOne) SetAsin(s string) *BookUpdateOne {
	buo.mutation.SetAsin(s)
	return buo
}

// SetNillableAsin sets the "asin" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAsin(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetAsin(*s)
	}
	return buo
}

// ClearAsin clears the value of the "asin" field.
func (buo *BookUpdateOne) ClearAsin() *BookUpdateOne {
	buo.mutation.ClearAsin()
	return buo
}

// SetLanguage sets the "language" field.
func (buo *BookUpdateOne) SetLanguage(s string) *BookUpdateOne {
	buo.mutation.SetLanguage(s)
	return buo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableLanguage(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetLanguage(*s)
	}
	return buo
}

// ClearLanguage clears the value of the "language" field.
func (buo *BookUpdateOne) ClearLanguage() *BookUpdateOne {
	buo.mutation.ClearLanguage()
	return buo
}

// SetExplicit sets the "explicit" field.
func (buo *BookUpdateOne) SetExplicit(b bool) *BookUpdateOne {
	buo.mutation.SetExplicit(b)
	return buo
}

// SetNillableExplicit sets the "explicit" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableExplicit(b *bool) *BookUpdateOne {
	if b != nil {
		buo.SetExplicit(*b)
	}
	return buo
}

// SetPublisher sets the "publisher" field.
func (buo *BookUpdateOne) SetPublisher(s string) *BookUpdateOne {
	buo.mutation.SetPublisher(s)
	return buo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublisher(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPublisher(*s)
	}
	return buo
}

// ClearPublisher clears the value of the "publisher" field.
func (buo *BookUpdateOne) ClearPublisher() *BookUpdateOne {
	buo.mutation.ClearPublisher()
	return buo
}

// SetPublishedDate sets the "published_date" field.
func (buo *BookUpdateOne) SetPublishedDate(t time.Time) *BookUpdateOne {
	buo.mutation.SetPublishedDate(t)
	return buo
}

// SetNillablePublishedDate sets the "published_date" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublishedDate(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetPublishedDate(*t)
	}
	return buo
}

// ClearPublishedDate clears the value of the "published_date" field.
func (buo *BookUpdateOne) ClearPublishedDate() *BookUpdateOne {
	buo.mutation.ClearPublishedDate()
	return buo
}

// SetGenres sets the "genres" field.
func (buo *BookUpdateOne) SetGenres(s []string) *BookUpdateOne {
	buo.mutation.SetGenres(s)
	return buo
}

// AppendGenres appends s to the "genres" field.
func (buo *BookUpdateOne) AppendGenres(s []string) *BookUpdateOne {
	buo.mutation.AppendGenres(s)
	return buo
}

// ClearGenres clears the value of the "genres" field.
func (buo *BookUpdateOne) ClearGenres() *BookUpdateOne {
	buo.mutation.ClearGenres()
	return buo
}

// SetTags sets the "tags" field.
func (buo *BookUpdateOne) SetTags(s []string) *BookUpdateOne {
	buo.mutation.SetTags(s)
	return buo
}

// AppendTags appends s to the "tags" field.
func (buo *BookUpdateOne) AppendTags(s []string) *BookUpdateOne {
	buo.mutation.AppendTags(s)
	return buo
}

// ClearTags clears the value of the "tags" field.
func (buo *BookUpdateOne) ClearTags() *BookUpdateOne {
	buo.mutation.ClearTags()
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BookUpdateOne) SetUpdatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (buo *BookUpdateOne) AddChapterIDs(ids ...int) *BookUpdateOne {
	buo.mutation.AddChapterIDs(ids...)
	return buo
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (buo *BookUpdateOne) AddChapters(c ...*Chapter) *BookUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddChapterIDs(ids...)
}

// SetCoverID sets the "cover" edge to the BookCover entity by ID.
func (buo *BookUpdateOne) SetCoverID(id int) *BookUpdateOne {
	buo.mutation.SetCoverID(id)
	return buo
}

// SetNillableCoverID sets the "cover" edge to the BookCover entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCoverID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetCoverID(*id)
	}
	return buo
}

// SetCover sets the "cover" edge to the BookCover entity.
func (buo *BookUpdateOne) SetCover(b *BookCover) *BookUpdateOne {
	return buo.SetCoverID(b.ID)
}

// AddAuthorIDs adds the "authors" edge to the Author entity by IDs.
func (buo *BookUpdateOne) AddAuthorIDs(ids ...string) *BookUpdateOne {
	buo.mutation.AddAuthorIDs(ids...)
	return buo
}

// AddAuthors adds the "authors" edges to the Author entity.
func (buo *BookUpdateOne) AddAuthors(a ...*Author) *BookUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddAuthorIDs(ids...)
}

// AddNarratorIDs adds the "narrators" edge to the Narrator entity by IDs.
func (buo *BookUpdateOne) AddNarratorIDs(ids ...string) *BookUpdateOne {
	buo.mutation.AddNarratorIDs(ids...)
	return buo
}

// AddNarrators adds the "narrators" edges to the Narrator entity.
func (buo *BookUpdateOne) AddNarrators(n ...*Narrator) *BookUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return buo.AddNarratorIDs(ids...)
}

// SetLibraryID sets the "library" edge to the Library entity by ID.
func (buo *BookUpdateOne) SetLibraryID(id string) *BookUpdateOne {
	buo.mutation.SetLibraryID(id)
	return buo
}

// SetLibrary sets the "library" edge to the Library entity.
func (buo *BookUpdateOne) SetLibrary(l *Library) *BookUpdateOne {
	return buo.SetLibraryID(l.ID)
}

// SetFolderID sets the "folder" edge to the Folder entity by ID.
func (buo *BookUpdateOne) SetFolderID(id string) *BookUpdateOne {
	buo.mutation.SetFolderID(id)
	return buo
}

// SetFolder sets the "folder" edge to the Folder entity.
func (buo *BookUpdateOne) SetFolder(f *Folder) *BookUpdateOne {
	return buo.SetFolderID(f.ID)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (buo *BookUpdateOne) ClearChapters() *BookUpdateOne {
	buo.mutation.ClearChapters()
	return buo
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (buo *BookUpdateOne) RemoveChapterIDs(ids ...int) *BookUpdateOne {
	buo.mutation.RemoveChapterIDs(ids...)
	return buo
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (buo *BookUpdateOne) RemoveChapters(c ...*Chapter) *BookUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveChapterIDs(ids...)
}

// ClearCover clears the "cover" edge to the BookCover entity.
func (buo *BookUpdateOne) ClearCover() *BookUpdateOne {
	buo.mutation.ClearCover()
	return buo
}

// ClearAuthors clears all "authors" edges to the Author entity.
func (buo *BookUpdateOne) ClearAuthors() *BookUpdateOne {
	buo.mutation.ClearAuthors()
	return buo
}

// RemoveAuthorIDs removes the "authors" edge to Author entities by IDs.
func (buo *BookUpdateOne) RemoveAuthorIDs(ids ...string) *BookUpdateOne {
	buo.mutation.RemoveAuthorIDs(ids...)
	return buo
}

// RemoveAuthors removes "authors" edges to Author entities.
func (buo *BookUpdateOne) RemoveAuthors(a ...*Author) *BookUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveAuthorIDs(ids...)
}

// ClearNarrators clears all "narrators" edges to the Narrator entity.
func (buo *BookUpdateOne) ClearNarrators() *BookUpdateOne {
	buo.mutation.ClearNarrators()
	return buo
}

// RemoveNarratorIDs removes the "narrators" edge to Narrator entities by IDs.
func (buo *BookUpdateOne) RemoveNarratorIDs(ids ...string) *BookUpdateOne {
	buo.mutation.RemoveNarratorIDs(ids...)
	return buo
}

// RemoveNarrators removes "narrators" edges to Narrator entities.
func (buo *BookUpdateOne) RemoveNarrators(n ...*Narrator) *BookUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return buo.RemoveNarratorIDs(ids...)
}

// ClearLibrary clears the "library" edge to the Library entity.
func (buo *BookUpdateOne) ClearLibrary() *BookUpdateOne {
	buo.mutation.ClearLibrary()
	return buo
}

// ClearFolder clears the "folder" edge to the Folder entity.
func (buo *BookUpdateOne) ClearFolder() *BookUpdateOne {
	buo.mutation.ClearFolder()
	return buo
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BookUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := book.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookUpdateOne) check() error {
	if buo.mutation.LibraryCleared() && len(buo.mutation.LibraryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Book.library"`)
	}
	if buo.mutation.FolderCleared() && len(buo.mutation.FolderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Book.folder"`)
	}
	return nil
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeString))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Duration(); ok {
		_spec.SetField(book.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedDuration(); ok {
		_spec.AddField(book.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.Size(); ok {
		_spec.SetField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedSize(); ok {
		_spec.AddField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Subtitle(); ok {
		_spec.SetField(book.FieldSubtitle, field.TypeString, value)
	}
	if buo.mutation.SubtitleCleared() {
		_spec.ClearField(book.FieldSubtitle, field.TypeString)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.DescriptionCleared() {
		_spec.ClearField(book.FieldDescription, field.TypeString)
	}
	if value, ok := buo.mutation.Isbn(); ok {
		_spec.SetField(book.FieldIsbn, field.TypeString, value)
	}
	if buo.mutation.IsbnCleared() {
		_spec.ClearField(book.FieldIsbn, field.TypeString)
	}
	if value, ok := buo.mutation.Asin(); ok {
		_spec.SetField(book.FieldAsin, field.TypeString, value)
	}
	if buo.mutation.AsinCleared() {
		_spec.ClearField(book.FieldAsin, field.TypeString)
	}
	if value, ok := buo.mutation.Language(); ok {
		_spec.SetField(book.FieldLanguage, field.TypeString, value)
	}
	if buo.mutation.LanguageCleared() {
		_spec.ClearField(book.FieldLanguage, field.TypeString)
	}
	if value, ok := buo.mutation.Explicit(); ok {
		_spec.SetField(book.FieldExplicit, field.TypeBool, value)
	}
	if value, ok := buo.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
	}
	if buo.mutation.PublisherCleared() {
		_spec.ClearField(book.FieldPublisher, field.TypeString)
	}
	if value, ok := buo.mutation.PublishedDate(); ok {
		_spec.SetField(book.FieldPublishedDate, field.TypeTime, value)
	}
	if buo.mutation.PublishedDateCleared() {
		_spec.ClearField(book.FieldPublishedDate, field.TypeTime)
	}
	if value, ok := buo.mutation.Genres(); ok {
		_spec.SetField(book.FieldGenres, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedGenres(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldGenres, value)
		})
	}
	if buo.mutation.GenresCleared() {
		_spec.ClearField(book.FieldGenres, field.TypeJSON)
	}
	if value, ok := buo.mutation.Tags(); ok {
		_spec.SetField(book.FieldTags, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldTags, value)
		})
	}
	if buo.mutation.TagsCleared() {
		_spec.ClearField(book.FieldTags, field.TypeJSON)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.ChaptersTable,
			Columns: []string{book.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !buo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.ChaptersTable,
			Columns: []string{book.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.ChaptersTable,
			Columns: []string{book.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   book.CoverTable,
			Columns: []string{book.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   book.CoverTable,
			Columns: []string{book.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(author.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !buo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(author.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(author.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.NarratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.NarratorsTable,
			Columns: book.NarratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedNarratorsIDs(); len(nodes) > 0 && !buo.mutation.NarratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.NarratorsTable,
			Columns: book.NarratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.NarratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.NarratorsTable,
			Columns: book.NarratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(library.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(library.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.FolderTable,
			Columns: []string{book.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.FolderTable,
			Columns: []string{book.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
