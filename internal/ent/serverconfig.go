// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ListenUpApp/ListenUp/internal/ent/server"
	"github.com/ListenUpApp/ListenUp/internal/ent/serverconfig"
)

// ServerConfig is the model entity for the ServerConfig schema.
type ServerConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the server instance
	Name string `json:"name,omitempty"`
	// Time when the config was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Time when the config was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerConfigQuery when eager-loading is set.
	Edges         ServerConfigEdges `json:"edges"`
	server_config *int
	selectValues  sql.SelectValues
}

// ServerConfigEdges holds the relations/edges for other nodes in the graph.
type ServerConfigEdges struct {
	// The server this config belongs to
	Server *Server `json:"server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerConfigEdges) ServerOrErr() (*Server, error) {
	if e.Server != nil {
		return e.Server, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: server.Label}
	}
	return nil, &NotLoadedError{edge: "server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serverconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case serverconfig.FieldName:
			values[i] = new(sql.NullString)
		case serverconfig.FieldCreatedAt, serverconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case serverconfig.ForeignKeys[0]: // server_config
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerConfig fields.
func (sc *ServerConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serverconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case serverconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case serverconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case serverconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case serverconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field server_config", value)
			} else if value.Valid {
				sc.server_config = new(int)
				*sc.server_config = int(value.Int64)
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerConfig.
// This includes values selected through modifiers, order, etc.
func (sc *ServerConfig) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryServer queries the "server" edge of the ServerConfig entity.
func (sc *ServerConfig) QueryServer() *ServerQuery {
	return NewServerConfigClient(sc.config).QueryServer(sc)
}

// Update returns a builder for updating this ServerConfig.
// Note that you need to call ServerConfig.Unwrap() before calling this method if this ServerConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ServerConfig) Update() *ServerConfigUpdateOne {
	return NewServerConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ServerConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ServerConfig) Unwrap() *ServerConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ServerConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ServerConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ServerConfigs is a parsable slice of ServerConfig.
type ServerConfigs []*ServerConfig
