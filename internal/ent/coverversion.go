// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/coverversion"
)

// CoverVersion is the model entity for the CoverVersion schema.
type CoverVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// Suffix holds the value of the "suffix" field.
	Suffix string `json:"suffix,omitempty"`
	// Time when the user was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CoverVersionQuery when eager-loading is set.
	Edges               CoverVersionEdges `json:"edges"`
	book_cover_versions *int
	selectValues        sql.SelectValues
}

// CoverVersionEdges holds the relations/edges for other nodes in the graph.
type CoverVersionEdges struct {
	// Cover holds the value of the cover edge.
	Cover *BookCover `json:"cover,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CoverOrErr returns the Cover value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoverVersionEdges) CoverOrErr() (*BookCover, error) {
	if e.Cover != nil {
		return e.Cover, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bookcover.Label}
	}
	return nil, &NotLoadedError{edge: "cover"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoverVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coverversion.FieldID, coverversion.FieldSize:
			values[i] = new(sql.NullInt64)
		case coverversion.FieldPath, coverversion.FieldFormat, coverversion.FieldSuffix:
			values[i] = new(sql.NullString)
		case coverversion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case coverversion.ForeignKeys[0]: // book_cover_versions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoverVersion fields.
func (cv *CoverVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coverversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cv.ID = int(value.Int64)
		case coverversion.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				cv.Path = value.String
			}
		case coverversion.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				cv.Format = value.String
			}
		case coverversion.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				cv.Size = value.Int64
			}
		case coverversion.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				cv.Suffix = value.String
			}
		case coverversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cv.UpdatedAt = value.Time
			}
		case coverversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field book_cover_versions", value)
			} else if value.Valid {
				cv.book_cover_versions = new(int)
				*cv.book_cover_versions = int(value.Int64)
			}
		default:
			cv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CoverVersion.
// This includes values selected through modifiers, order, etc.
func (cv *CoverVersion) Value(name string) (ent.Value, error) {
	return cv.selectValues.Get(name)
}

// QueryCover queries the "cover" edge of the CoverVersion entity.
func (cv *CoverVersion) QueryCover() *BookCoverQuery {
	return NewCoverVersionClient(cv.config).QueryCover(cv)
}

// Update returns a builder for updating this CoverVersion.
// Note that you need to call CoverVersion.Unwrap() before calling this method if this CoverVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (cv *CoverVersion) Update() *CoverVersionUpdateOne {
	return NewCoverVersionClient(cv.config).UpdateOne(cv)
}

// Unwrap unwraps the CoverVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cv *CoverVersion) Unwrap() *CoverVersion {
	_tx, ok := cv.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoverVersion is not a transactional entity")
	}
	cv.config.driver = _tx.drv
	return cv
}

// String implements the fmt.Stringer.
func (cv *CoverVersion) String() string {
	var builder strings.Builder
	builder.WriteString("CoverVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cv.ID))
	builder.WriteString("path=")
	builder.WriteString(cv.Path)
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(cv.Format)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", cv.Size))
	builder.WriteString(", ")
	builder.WriteString("suffix=")
	builder.WriteString(cv.Suffix)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CoverVersions is a parsable slice of CoverVersion.
type CoverVersions []*CoverVersion
