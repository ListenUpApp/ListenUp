// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/folder"
	"github.com/ListenUpApp/ListenUp/internal/ent/library"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration float64 `json:"duration,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ImportedAt holds the value of the "imported_at" field.
	ImportedAt time.Time `json:"imported_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// TitleSort holds the value of the "title_sort" field.
	TitleSort string `json:"title_sort,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Isbn holds the value of the "isbn" field.
	Isbn string `json:"isbn,omitempty"`
	// Asin holds the value of the "asin" field.
	Asin string `json:"asin,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Explicit holds the value of the "explicit" field.
	Explicit bool `json:"explicit,omitempty"`
	// Publisher holds the value of the "publisher" field.
	Publisher string `json:"publisher,omitempty"`
	// PublishedDate holds the value of the "published_date" field.
	PublishedDate time.Time `json:"published_date,omitempty"`
	// Genres holds the value of the "genres" field.
	Genres []string `json:"genres,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges                 BookEdges `json:"edges"`
	folder_books          *string
	library_library_books *string
	selectValues          sql.SelectValues
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// Chapters holds the value of the chapters edge.
	Chapters []*Chapter `json:"chapters,omitempty"`
	// Cover holds the value of the cover edge.
	Cover *BookCover `json:"cover,omitempty"`
	// Authors holds the value of the authors edge.
	Authors []*Author `json:"authors,omitempty"`
	// Narrators holds the value of the narrators edge.
	Narrators []*Narrator `json:"narrators,omitempty"`
	// Library holds the value of the library edge.
	Library *Library `json:"library,omitempty"`
	// Folder holds the value of the folder edge.
	Folder *Folder `json:"folder,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ChaptersOrErr returns the Chapters value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) ChaptersOrErr() ([]*Chapter, error) {
	if e.loadedTypes[0] {
		return e.Chapters, nil
	}
	return nil, &NotLoadedError{edge: "chapters"}
}

// CoverOrErr returns the Cover value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) CoverOrErr() (*BookCover, error) {
	if e.Cover != nil {
		return e.Cover, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: bookcover.Label}
	}
	return nil, &NotLoadedError{edge: "cover"}
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) AuthorsOrErr() ([]*Author, error) {
	if e.loadedTypes[2] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// NarratorsOrErr returns the Narrators value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) NarratorsOrErr() ([]*Narrator, error) {
	if e.loadedTypes[3] {
		return e.Narrators, nil
	}
	return nil, &NotLoadedError{edge: "narrators"}
}

// LibraryOrErr returns the Library value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) LibraryOrErr() (*Library, error) {
	if e.Library != nil {
		return e.Library, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: library.Label}
	}
	return nil, &NotLoadedError{edge: "library"}
}

// FolderOrErr returns the Folder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) FolderOrErr() (*Folder, error) {
	if e.Folder != nil {
		return e.Folder, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: folder.Label}
	}
	return nil, &NotLoadedError{edge: "folder"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldGenres, book.FieldTags:
			values[i] = new([]byte)
		case book.FieldExplicit:
			values[i] = new(sql.NullBool)
		case book.FieldDuration:
			values[i] = new(sql.NullFloat64)
		case book.FieldSize:
			values[i] = new(sql.NullInt64)
		case book.FieldID, book.FieldTitle, book.FieldTitleSort, book.FieldSubtitle, book.FieldDescription, book.FieldIsbn, book.FieldAsin, book.FieldLanguage, book.FieldPublisher:
			values[i] = new(sql.NullString)
		case book.FieldCreatedAt, book.FieldUpdatedAt, book.FieldImportedAt, book.FieldPublishedDate:
			values[i] = new(sql.NullTime)
		case book.ForeignKeys[0]: // folder_books
			values[i] = new(sql.NullString)
		case book.ForeignKeys[1]: // library_library_books
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = value.String
			}
		case book.FieldDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				b.Duration = value.Float64
			}
		case book.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				b.Size = value.Int64
			}
		case book.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case book.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case book.FieldImportedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field imported_at", values[i])
			} else if value.Valid {
				b.ImportedAt = value.Time
			}
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldTitleSort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title_sort", values[i])
			} else if value.Valid {
				b.TitleSort = value.String
			}
		case book.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				b.Subtitle = value.String
			}
		case book.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				b.Description = value.String
			}
		case book.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				b.Isbn = value.String
			}
		case book.FieldAsin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asin", values[i])
			} else if value.Valid {
				b.Asin = value.String
			}
		case book.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				b.Language = value.String
			}
		case book.FieldExplicit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field explicit", values[i])
			} else if value.Valid {
				b.Explicit = value.Bool
			}
		case book.FieldPublisher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher", values[i])
			} else if value.Valid {
				b.Publisher = value.String
			}
		case book.FieldPublishedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_date", values[i])
			} else if value.Valid {
				b.PublishedDate = value.Time
			}
		case book.FieldGenres:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field genres", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Genres); err != nil {
					return fmt.Errorf("unmarshal field genres: %w", err)
				}
			}
		case book.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case book.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_books", values[i])
			} else if value.Valid {
				b.folder_books = new(string)
				*b.folder_books = value.String
			}
		case book.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field library_library_books", values[i])
			} else if value.Valid {
				b.library_library_books = new(string)
				*b.library_library_books = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryChapters queries the "chapters" edge of the Book entity.
func (b *Book) QueryChapters() *ChapterQuery {
	return NewBookClient(b.config).QueryChapters(b)
}

// QueryCover queries the "cover" edge of the Book entity.
func (b *Book) QueryCover() *BookCoverQuery {
	return NewBookClient(b.config).QueryCover(b)
}

// QueryAuthors queries the "authors" edge of the Book entity.
func (b *Book) QueryAuthors() *AuthorQuery {
	return NewBookClient(b.config).QueryAuthors(b)
}

// QueryNarrators queries the "narrators" edge of the Book entity.
func (b *Book) QueryNarrators() *NarratorQuery {
	return NewBookClient(b.config).QueryNarrators(b)
}

// QueryLibrary queries the "library" edge of the Book entity.
func (b *Book) QueryLibrary() *LibraryQuery {
	return NewBookClient(b.config).QueryLibrary(b)
}

// QueryFolder queries the "folder" edge of the Book entity.
func (b *Book) QueryFolder() *FolderQuery {
	return NewBookClient(b.config).QueryFolder(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", b.Duration))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", b.Size))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("imported_at=")
	builder.WriteString(b.ImportedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("title_sort=")
	builder.WriteString(b.TitleSort)
	builder.WriteString(", ")
	builder.WriteString("subtitle=")
	builder.WriteString(b.Subtitle)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(b.Description)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(b.Isbn)
	builder.WriteString(", ")
	builder.WriteString("asin=")
	builder.WriteString(b.Asin)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(b.Language)
	builder.WriteString(", ")
	builder.WriteString("explicit=")
	builder.WriteString(fmt.Sprintf("%v", b.Explicit))
	builder.WriteString(", ")
	builder.WriteString("publisher=")
	builder.WriteString(b.Publisher)
	builder.WriteString(", ")
	builder.WriteString("published_date=")
	builder.WriteString(b.PublishedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("genres=")
	builder.WriteString(fmt.Sprintf("%v", b.Genres))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", b.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book
