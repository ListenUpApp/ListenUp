// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
)

// BookCoverUpdate is the builder for updating BookCover entities.
type BookCoverUpdate struct {
	config
	hooks    []Hook
	mutation *BookCoverMutation
}

// Where appends a list predicates to the BookCoverUpdate builder.
func (bcu *BookCoverUpdate) Where(ps ...predicate.BookCover) *BookCoverUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetPath sets the "path" field.
func (bcu *BookCoverUpdate) SetPath(s string) *BookCoverUpdate {
	bcu.mutation.SetPath(s)
	return bcu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bcu *BookCoverUpdate) SetNillablePath(s *string) *BookCoverUpdate {
	if s != nil {
		bcu.SetPath(*s)
	}
	return bcu
}

// SetFormat sets the "format" field.
func (bcu *BookCoverUpdate) SetFormat(s string) *BookCoverUpdate {
	bcu.mutation.SetFormat(s)
	return bcu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (bcu *BookCoverUpdate) SetNillableFormat(s *string) *BookCoverUpdate {
	if s != nil {
		bcu.SetFormat(*s)
	}
	return bcu
}

// SetSize sets the "size" field.
func (bcu *BookCoverUpdate) SetSize(i int64) *BookCoverUpdate {
	bcu.mutation.ResetSize()
	bcu.mutation.SetSize(i)
	return bcu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bcu *BookCoverUpdate) SetNillableSize(i *int64) *BookCoverUpdate {
	if i != nil {
		bcu.SetSize(*i)
	}
	return bcu
}

// AddSize adds i to the "size" field.
func (bcu *BookCoverUpdate) AddSize(i int64) *BookCoverUpdate {
	bcu.mutation.AddSize(i)
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BookCoverUpdate) SetUpdatedAt(t time.Time) *BookCoverUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bcu *BookCoverUpdate) SetBookID(id string) *BookCoverUpdate {
	bcu.mutation.SetBookID(id)
	return bcu
}

// SetBook sets the "book" edge to the Book entity.
func (bcu *BookCoverUpdate) SetBook(b *Book) *BookCoverUpdate {
	return bcu.SetBookID(b.ID)
}

// Mutation returns the BookCoverMutation object of the builder.
func (bcu *BookCoverUpdate) Mutation() *BookCoverMutation {
	return bcu.mutation
}

// ClearBook clears the "book" edge to the Book entity.
func (bcu *BookCoverUpdate) ClearBook() *BookCoverUpdate {
	bcu.mutation.ClearBook()
	return bcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BookCoverUpdate) Save(ctx context.Context) (int, error) {
	bcu.defaults()
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BookCoverUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BookCoverUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BookCoverUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BookCoverUpdate) defaults() {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		v := bookcover.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BookCoverUpdate) check() error {
	if v, ok := bcu.mutation.Path(); ok {
		if err := bookcover.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "BookCover.path": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.Format(); ok {
		if err := bookcover.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "BookCover.format": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.Size(); ok {
		if err := bookcover.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "BookCover.size": %w`, err)}
		}
	}
	if bcu.mutation.BookCleared() && len(bcu.mutation.BookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BookCover.book"`)
	}
	return nil
}

func (bcu *BookCoverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookcover.Table, bookcover.Columns, sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.Path(); ok {
		_spec.SetField(bookcover.FieldPath, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Format(); ok {
		_spec.SetField(bookcover.FieldFormat, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Size(); ok {
		_spec.SetField(bookcover.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedSize(); ok {
		_spec.AddField(bookcover.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(bookcover.FieldUpdatedAt, field.TypeTime, value)
	}
	if bcu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bookcover.BookTable,
			Columns: []string{bookcover.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bookcover.BookTable,
			Columns: []string{bookcover.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookcover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BookCoverUpdateOne is the builder for updating a single BookCover entity.
type BookCoverUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookCoverMutation
}

// SetPath sets the "path" field.
func (bcuo *BookCoverUpdateOne) SetPath(s string) *BookCoverUpdateOne {
	bcuo.mutation.SetPath(s)
	return bcuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bcuo *BookCoverUpdateOne) SetNillablePath(s *string) *BookCoverUpdateOne {
	if s != nil {
		bcuo.SetPath(*s)
	}
	return bcuo
}

// SetFormat sets the "format" field.
func (bcuo *BookCoverUpdateOne) SetFormat(s string) *BookCoverUpdateOne {
	bcuo.mutation.SetFormat(s)
	return bcuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (bcuo *BookCoverUpdateOne) SetNillableFormat(s *string) *BookCoverUpdateOne {
	if s != nil {
		bcuo.SetFormat(*s)
	}
	return bcuo
}

// SetSize sets the "size" field.
func (bcuo *BookCoverUpdateOne) SetSize(i int64) *BookCoverUpdateOne {
	bcuo.mutation.ResetSize()
	bcuo.mutation.SetSize(i)
	return bcuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bcuo *BookCoverUpdateOne) SetNillableSize(i *int64) *BookCoverUpdateOne {
	if i != nil {
		bcuo.SetSize(*i)
	}
	return bcuo
}

// AddSize adds i to the "size" field.
func (bcuo *BookCoverUpdateOne) AddSize(i int64) *BookCoverUpdateOne {
	bcuo.mutation.AddSize(i)
	return bcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BookCoverUpdateOne) SetUpdatedAt(t time.Time) *BookCoverUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bcuo *BookCoverUpdateOne) SetBookID(id string) *BookCoverUpdateOne {
	bcuo.mutation.SetBookID(id)
	return bcuo
}

// SetBook sets the "book" edge to the Book entity.
func (bcuo *BookCoverUpdateOne) SetBook(b *Book) *BookCoverUpdateOne {
	return bcuo.SetBookID(b.ID)
}

// Mutation returns the BookCoverMutation object of the builder.
func (bcuo *BookCoverUpdateOne) Mutation() *BookCoverMutation {
	return bcuo.mutation
}

// ClearBook clears the "book" edge to the Book entity.
func (bcuo *BookCoverUpdateOne) ClearBook() *BookCoverUpdateOne {
	bcuo.mutation.ClearBook()
	return bcuo
}

// Where appends a list predicates to the BookCoverUpdate builder.
func (bcuo *BookCoverUpdateOne) Where(ps ...predicate.BookCover) *BookCoverUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BookCoverUpdateOne) Select(field string, fields ...string) *BookCoverUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BookCover entity.
func (bcuo *BookCoverUpdateOne) Save(ctx context.Context) (*BookCover, error) {
	bcuo.defaults()
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BookCoverUpdateOne) SaveX(ctx context.Context) *BookCover {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BookCoverUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BookCoverUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BookCoverUpdateOne) defaults() {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		v := bookcover.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BookCoverUpdateOne) check() error {
	if v, ok := bcuo.mutation.Path(); ok {
		if err := bookcover.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "BookCover.path": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.Format(); ok {
		if err := bookcover.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "BookCover.format": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.Size(); ok {
		if err := bookcover.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "BookCover.size": %w`, err)}
		}
	}
	if bcuo.mutation.BookCleared() && len(bcuo.mutation.BookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BookCover.book"`)
	}
	return nil
}

func (bcuo *BookCoverUpdateOne) sqlSave(ctx context.Context) (_node *BookCover, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookcover.Table, bookcover.Columns, sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookCover.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookcover.FieldID)
		for _, f := range fields {
			if !bookcover.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookcover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.Path(); ok {
		_spec.SetField(bookcover.FieldPath, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Format(); ok {
		_spec.SetField(bookcover.FieldFormat, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Size(); ok {
		_spec.SetField(bookcover.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedSize(); ok {
		_spec.AddField(bookcover.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(bookcover.FieldUpdatedAt, field.TypeTime, value)
	}
	if bcuo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bookcover.BookTable,
			Columns: []string{bookcover.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bookcover.BookTable,
			Columns: []string{bookcover.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BookCover{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookcover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
