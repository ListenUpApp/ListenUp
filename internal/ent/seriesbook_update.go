// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/book"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
	"github.com/ListenUpApp/ListenUp/internal/ent/series"
	"github.com/ListenUpApp/ListenUp/internal/ent/seriesbook"
)

// SeriesBookUpdate is the builder for updating SeriesBook entities.
type SeriesBookUpdate struct {
	config
	hooks    []Hook
	mutation *SeriesBookMutation
}

// Where appends a list predicates to the SeriesBookUpdate builder.
func (sbu *SeriesBookUpdate) Where(ps ...predicate.SeriesBook) *SeriesBookUpdate {
	sbu.mutation.Where(ps...)
	return sbu
}

// SetSequence sets the "sequence" field.
func (sbu *SeriesBookUpdate) SetSequence(f float64) *SeriesBookUpdate {
	sbu.mutation.ResetSequence()
	sbu.mutation.SetSequence(f)
	return sbu
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (sbu *SeriesBookUpdate) SetNillableSequence(f *float64) *SeriesBookUpdate {
	if f != nil {
		sbu.SetSequence(*f)
	}
	return sbu
}

// AddSequence adds f to the "sequence" field.
func (sbu *SeriesBookUpdate) AddSequence(f float64) *SeriesBookUpdate {
	sbu.mutation.AddSequence(f)
	return sbu
}

// SetSeriesID sets the "series" edge to the Series entity by ID.
func (sbu *SeriesBookUpdate) SetSeriesID(id string) *SeriesBookUpdate {
	sbu.mutation.SetSeriesID(id)
	return sbu
}

// SetSeries sets the "series" edge to the Series entity.
func (sbu *SeriesBookUpdate) SetSeries(s *Series) *SeriesBookUpdate {
	return sbu.SetSeriesID(s.ID)
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (sbu *SeriesBookUpdate) SetBookID(id string) *SeriesBookUpdate {
	sbu.mutation.SetBookID(id)
	return sbu
}

// SetBook sets the "book" edge to the Book entity.
func (sbu *SeriesBookUpdate) SetBook(b *Book) *SeriesBookUpdate {
	return sbu.SetBookID(b.ID)
}

// Mutation returns the SeriesBookMutation object of the builder.
func (sbu *SeriesBookUpdate) Mutation() *SeriesBookMutation {
	return sbu.mutation
}

// ClearSeries clears the "series" edge to the Series entity.
func (sbu *SeriesBookUpdate) ClearSeries() *SeriesBookUpdate {
	sbu.mutation.ClearSeries()
	return sbu
}

// ClearBook clears the "book" edge to the Book entity.
func (sbu *SeriesBookUpdate) ClearBook() *SeriesBookUpdate {
	sbu.mutation.ClearBook()
	return sbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbu *SeriesBookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sbu.sqlSave, sbu.mutation, sbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbu *SeriesBookUpdate) SaveX(ctx context.Context) int {
	affected, err := sbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbu *SeriesBookUpdate) Exec(ctx context.Context) error {
	_, err := sbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbu *SeriesBookUpdate) ExecX(ctx context.Context) {
	if err := sbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbu *SeriesBookUpdate) check() error {
	if sbu.mutation.SeriesCleared() && len(sbu.mutation.SeriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeriesBook.series"`)
	}
	if sbu.mutation.BookCleared() && len(sbu.mutation.BookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeriesBook.book"`)
	}
	return nil
}

func (sbu *SeriesBookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(seriesbook.Table, seriesbook.Columns, sqlgraph.NewFieldSpec(seriesbook.FieldID, field.TypeInt))
	if ps := sbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbu.mutation.Sequence(); ok {
		_spec.SetField(seriesbook.FieldSequence, field.TypeFloat64, value)
	}
	if value, ok := sbu.mutation.AddedSequence(); ok {
		_spec.AddField(seriesbook.FieldSequence, field.TypeFloat64, value)
	}
	if sbu.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.SeriesTable,
			Columns: []string{seriesbook.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbu.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.SeriesTable,
			Columns: []string{seriesbook.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sbu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.BookTable,
			Columns: []string{seriesbook.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbu.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.BookTable,
			Columns: []string{seriesbook.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seriesbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sbu.mutation.done = true
	return n, nil
}

// SeriesBookUpdateOne is the builder for updating a single SeriesBook entity.
type SeriesBookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeriesBookMutation
}

// SetSequence sets the "sequence" field.
func (sbuo *SeriesBookUpdateOne) SetSequence(f float64) *SeriesBookUpdateOne {
	sbuo.mutation.ResetSequence()
	sbuo.mutation.SetSequence(f)
	return sbuo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (sbuo *SeriesBookUpdateOne) SetNillableSequence(f *float64) *SeriesBookUpdateOne {
	if f != nil {
		sbuo.SetSequence(*f)
	}
	return sbuo
}

// AddSequence adds f to the "sequence" field.
func (sbuo *SeriesBookUpdateOne) AddSequence(f float64) *SeriesBookUpdateOne {
	sbuo.mutation.AddSequence(f)
	return sbuo
}

// SetSeriesID sets the "series" edge to the Series entity by ID.
func (sbuo *SeriesBookUpdateOne) SetSeriesID(id string) *SeriesBookUpdateOne {
	sbuo.mutation.SetSeriesID(id)
	return sbuo
}

// SetSeries sets the "series" edge to the Series entity.
func (sbuo *SeriesBookUpdateOne) SetSeries(s *Series) *SeriesBookUpdateOne {
	return sbuo.SetSeriesID(s.ID)
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (sbuo *SeriesBookUpdateOne) SetBookID(id string) *SeriesBookUpdateOne {
	sbuo.mutation.SetBookID(id)
	return sbuo
}

// SetBook sets the "book" edge to the Book entity.
func (sbuo *SeriesBookUpdateOne) SetBook(b *Book) *SeriesBookUpdateOne {
	return sbuo.SetBookID(b.ID)
}

// Mutation returns the SeriesBookMutation object of the builder.
func (sbuo *SeriesBookUpdateOne) Mutation() *SeriesBookMutation {
	return sbuo.mutation
}

// ClearSeries clears the "series" edge to the Series entity.
func (sbuo *SeriesBookUpdateOne) ClearSeries() *SeriesBookUpdateOne {
	sbuo.mutation.ClearSeries()
	return sbuo
}

// ClearBook clears the "book" edge to the Book entity.
func (sbuo *SeriesBookUpdateOne) ClearBook() *SeriesBookUpdateOne {
	sbuo.mutation.ClearBook()
	return sbuo
}

// Where appends a list predicates to the SeriesBookUpdate builder.
func (sbuo *SeriesBookUpdateOne) Where(ps ...predicate.SeriesBook) *SeriesBookUpdateOne {
	sbuo.mutation.Where(ps...)
	return sbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbuo *SeriesBookUpdateOne) Select(field string, fields ...string) *SeriesBookUpdateOne {
	sbuo.fields = append([]string{field}, fields...)
	return sbuo
}

// Save executes the query and returns the updated SeriesBook entity.
func (sbuo *SeriesBookUpdateOne) Save(ctx context.Context) (*SeriesBook, error) {
	return withHooks(ctx, sbuo.sqlSave, sbuo.mutation, sbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbuo *SeriesBookUpdateOne) SaveX(ctx context.Context) *SeriesBook {
	node, err := sbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbuo *SeriesBookUpdateOne) Exec(ctx context.Context) error {
	_, err := sbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbuo *SeriesBookUpdateOne) ExecX(ctx context.Context) {
	if err := sbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbuo *SeriesBookUpdateOne) check() error {
	if sbuo.mutation.SeriesCleared() && len(sbuo.mutation.SeriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeriesBook.series"`)
	}
	if sbuo.mutation.BookCleared() && len(sbuo.mutation.BookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeriesBook.book"`)
	}
	return nil
}

func (sbuo *SeriesBookUpdateOne) sqlSave(ctx context.Context) (_node *SeriesBook, err error) {
	if err := sbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seriesbook.Table, seriesbook.Columns, sqlgraph.NewFieldSpec(seriesbook.FieldID, field.TypeInt))
	id, ok := sbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeriesBook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seriesbook.FieldID)
		for _, f := range fields {
			if !seriesbook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seriesbook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbuo.mutation.Sequence(); ok {
		_spec.SetField(seriesbook.FieldSequence, field.TypeFloat64, value)
	}
	if value, ok := sbuo.mutation.AddedSequence(); ok {
		_spec.AddField(seriesbook.FieldSequence, field.TypeFloat64, value)
	}
	if sbuo.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.SeriesTable,
			Columns: []string{seriesbook.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbuo.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.SeriesTable,
			Columns: []string{seriesbook.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sbuo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.BookTable,
			Columns: []string{seriesbook.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbuo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriesbook.BookTable,
			Columns: []string{seriesbook.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SeriesBook{config: sbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seriesbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbuo.mutation.done = true
	return _node, nil
}
