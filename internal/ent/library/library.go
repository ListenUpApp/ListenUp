// Code generated by ent, DO NOT EDIT.

package library

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the library type in the database.
	Label = "library"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeActiveUsers holds the string denoting the active_users edge name in mutations.
	EdgeActiveUsers = "active_users"
	// EdgeFolders holds the string denoting the folders edge name in mutations.
	EdgeFolders = "folders"
	// EdgeLibraryBooks holds the string denoting the library_books edge name in mutations.
	EdgeLibraryBooks = "library_books"
	// Table holds the table name of the library in the database.
	Table = "libraries"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_libraries"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// ActiveUsersTable is the table that holds the active_users relation/edge.
	ActiveUsersTable = "users"
	// ActiveUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ActiveUsersInverseTable = "users"
	// ActiveUsersColumn is the table column denoting the active_users relation/edge.
	ActiveUsersColumn = "user_active_library"
	// FoldersTable is the table that holds the folders relation/edge. The primary key declared below.
	FoldersTable = "library_folders"
	// FoldersInverseTable is the table name for the Folder entity.
	// It exists in this package in order to avoid circular dependency with the "folder" package.
	FoldersInverseTable = "folders"
	// LibraryBooksTable is the table that holds the library_books relation/edge.
	LibraryBooksTable = "books"
	// LibraryBooksInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	LibraryBooksInverseTable = "books"
	// LibraryBooksColumn is the table column denoting the library_books relation/edge.
	LibraryBooksColumn = "library_library_books"
)

// Columns holds all SQL columns for library fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "library_id"}
	// FoldersPrimaryKey and FoldersColumn2 are the table columns denoting the
	// primary key for the folders relation (M2M).
	FoldersPrimaryKey = []string{"library_id", "folder_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Library queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActiveUsersCount orders the results by active_users count.
func ByActiveUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActiveUsersStep(), opts...)
	}
}

// ByActiveUsers orders the results by active_users terms.
func ByActiveUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActiveUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFoldersCount orders the results by folders count.
func ByFoldersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFoldersStep(), opts...)
	}
}

// ByFolders orders the results by folders terms.
func ByFolders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFoldersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLibraryBooksCount orders the results by library_books count.
func ByLibraryBooksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLibraryBooksStep(), opts...)
	}
}

// ByLibraryBooks orders the results by library_books terms.
func ByLibraryBooks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLibraryBooksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}
func newActiveUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActiveUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ActiveUsersTable, ActiveUsersColumn),
	)
}
func newFoldersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FoldersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FoldersTable, FoldersPrimaryKey...),
	)
}
func newLibraryBooksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LibraryBooksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LibraryBooksTable, LibraryBooksColumn),
	)
}
