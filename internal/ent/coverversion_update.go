// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/coverversion"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
)

// CoverVersionUpdate is the builder for updating CoverVersion entities.
type CoverVersionUpdate struct {
	config
	hooks    []Hook
	mutation *CoverVersionMutation
}

// Where appends a list predicates to the CoverVersionUpdate builder.
func (cvu *CoverVersionUpdate) Where(ps ...predicate.CoverVersion) *CoverVersionUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetPath sets the "path" field.
func (cvu *CoverVersionUpdate) SetPath(s string) *CoverVersionUpdate {
	cvu.mutation.SetPath(s)
	return cvu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (cvu *CoverVersionUpdate) SetNillablePath(s *string) *CoverVersionUpdate {
	if s != nil {
		cvu.SetPath(*s)
	}
	return cvu
}

// SetFormat sets the "format" field.
func (cvu *CoverVersionUpdate) SetFormat(s string) *CoverVersionUpdate {
	cvu.mutation.SetFormat(s)
	return cvu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (cvu *CoverVersionUpdate) SetNillableFormat(s *string) *CoverVersionUpdate {
	if s != nil {
		cvu.SetFormat(*s)
	}
	return cvu
}

// SetSize sets the "size" field.
func (cvu *CoverVersionUpdate) SetSize(i int64) *CoverVersionUpdate {
	cvu.mutation.ResetSize()
	cvu.mutation.SetSize(i)
	return cvu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cvu *CoverVersionUpdate) SetNillableSize(i *int64) *CoverVersionUpdate {
	if i != nil {
		cvu.SetSize(*i)
	}
	return cvu
}

// AddSize adds i to the "size" field.
func (cvu *CoverVersionUpdate) AddSize(i int64) *CoverVersionUpdate {
	cvu.mutation.AddSize(i)
	return cvu
}

// SetSuffix sets the "suffix" field.
func (cvu *CoverVersionUpdate) SetSuffix(s string) *CoverVersionUpdate {
	cvu.mutation.SetSuffix(s)
	return cvu
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (cvu *CoverVersionUpdate) SetNillableSuffix(s *string) *CoverVersionUpdate {
	if s != nil {
		cvu.SetSuffix(*s)
	}
	return cvu
}

// SetUpdatedAt sets the "updated_at" field.
func (cvu *CoverVersionUpdate) SetUpdatedAt(t time.Time) *CoverVersionUpdate {
	cvu.mutation.SetUpdatedAt(t)
	return cvu
}

// SetCoverID sets the "cover" edge to the BookCover entity by ID.
func (cvu *CoverVersionUpdate) SetCoverID(id int) *CoverVersionUpdate {
	cvu.mutation.SetCoverID(id)
	return cvu
}

// SetNillableCoverID sets the "cover" edge to the BookCover entity by ID if the given value is not nil.
func (cvu *CoverVersionUpdate) SetNillableCoverID(id *int) *CoverVersionUpdate {
	if id != nil {
		cvu = cvu.SetCoverID(*id)
	}
	return cvu
}

// SetCover sets the "cover" edge to the BookCover entity.
func (cvu *CoverVersionUpdate) SetCover(b *BookCover) *CoverVersionUpdate {
	return cvu.SetCoverID(b.ID)
}

// Mutation returns the CoverVersionMutation object of the builder.
func (cvu *CoverVersionUpdate) Mutation() *CoverVersionMutation {
	return cvu.mutation
}

// ClearCover clears the "cover" edge to the BookCover entity.
func (cvu *CoverVersionUpdate) ClearCover() *CoverVersionUpdate {
	cvu.mutation.ClearCover()
	return cvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *CoverVersionUpdate) Save(ctx context.Context) (int, error) {
	cvu.defaults()
	return withHooks(ctx, cvu.sqlSave, cvu.mutation, cvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *CoverVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *CoverVersionUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *CoverVersionUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvu *CoverVersionUpdate) defaults() {
	if _, ok := cvu.mutation.UpdatedAt(); !ok {
		v := coverversion.UpdateDefaultUpdatedAt()
		cvu.mutation.SetUpdatedAt(v)
	}
}

func (cvu *CoverVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coverversion.Table, coverversion.Columns, sqlgraph.NewFieldSpec(coverversion.FieldID, field.TypeInt))
	if ps := cvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvu.mutation.Path(); ok {
		_spec.SetField(coverversion.FieldPath, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Format(); ok {
		_spec.SetField(coverversion.FieldFormat, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Size(); ok {
		_spec.SetField(coverversion.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cvu.mutation.AddedSize(); ok {
		_spec.AddField(coverversion.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cvu.mutation.Suffix(); ok {
		_spec.SetField(coverversion.FieldSuffix, field.TypeString, value)
	}
	if value, ok := cvu.mutation.UpdatedAt(); ok {
		_spec.SetField(coverversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if cvu.mutation.CoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coverversion.CoverTable,
			Columns: []string{coverversion.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.CoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coverversion.CoverTable,
			Columns: []string{coverversion.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coverversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cvu.mutation.done = true
	return n, nil
}

// CoverVersionUpdateOne is the builder for updating a single CoverVersion entity.
type CoverVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoverVersionMutation
}

// SetPath sets the "path" field.
func (cvuo *CoverVersionUpdateOne) SetPath(s string) *CoverVersionUpdateOne {
	cvuo.mutation.SetPath(s)
	return cvuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (cvuo *CoverVersionUpdateOne) SetNillablePath(s *string) *CoverVersionUpdateOne {
	if s != nil {
		cvuo.SetPath(*s)
	}
	return cvuo
}

// SetFormat sets the "format" field.
func (cvuo *CoverVersionUpdateOne) SetFormat(s string) *CoverVersionUpdateOne {
	cvuo.mutation.SetFormat(s)
	return cvuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (cvuo *CoverVersionUpdateOne) SetNillableFormat(s *string) *CoverVersionUpdateOne {
	if s != nil {
		cvuo.SetFormat(*s)
	}
	return cvuo
}

// SetSize sets the "size" field.
func (cvuo *CoverVersionUpdateOne) SetSize(i int64) *CoverVersionUpdateOne {
	cvuo.mutation.ResetSize()
	cvuo.mutation.SetSize(i)
	return cvuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cvuo *CoverVersionUpdateOne) SetNillableSize(i *int64) *CoverVersionUpdateOne {
	if i != nil {
		cvuo.SetSize(*i)
	}
	return cvuo
}

// AddSize adds i to the "size" field.
func (cvuo *CoverVersionUpdateOne) AddSize(i int64) *CoverVersionUpdateOne {
	cvuo.mutation.AddSize(i)
	return cvuo
}

// SetSuffix sets the "suffix" field.
func (cvuo *CoverVersionUpdateOne) SetSuffix(s string) *CoverVersionUpdateOne {
	cvuo.mutation.SetSuffix(s)
	return cvuo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (cvuo *CoverVersionUpdateOne) SetNillableSuffix(s *string) *CoverVersionUpdateOne {
	if s != nil {
		cvuo.SetSuffix(*s)
	}
	return cvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cvuo *CoverVersionUpdateOne) SetUpdatedAt(t time.Time) *CoverVersionUpdateOne {
	cvuo.mutation.SetUpdatedAt(t)
	return cvuo
}

// SetCoverID sets the "cover" edge to the BookCover entity by ID.
func (cvuo *CoverVersionUpdateOne) SetCoverID(id int) *CoverVersionUpdateOne {
	cvuo.mutation.SetCoverID(id)
	return cvuo
}

// SetNillableCoverID sets the "cover" edge to the BookCover entity by ID if the given value is not nil.
func (cvuo *CoverVersionUpdateOne) SetNillableCoverID(id *int) *CoverVersionUpdateOne {
	if id != nil {
		cvuo = cvuo.SetCoverID(*id)
	}
	return cvuo
}

// SetCover sets the "cover" edge to the BookCover entity.
func (cvuo *CoverVersionUpdateOne) SetCover(b *BookCover) *CoverVersionUpdateOne {
	return cvuo.SetCoverID(b.ID)
}

// Mutation returns the CoverVersionMutation object of the builder.
func (cvuo *CoverVersionUpdateOne) Mutation() *CoverVersionMutation {
	return cvuo.mutation
}

// ClearCover clears the "cover" edge to the BookCover entity.
func (cvuo *CoverVersionUpdateOne) ClearCover() *CoverVersionUpdateOne {
	cvuo.mutation.ClearCover()
	return cvuo
}

// Where appends a list predicates to the CoverVersionUpdate builder.
func (cvuo *CoverVersionUpdateOne) Where(ps ...predicate.CoverVersion) *CoverVersionUpdateOne {
	cvuo.mutation.Where(ps...)
	return cvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *CoverVersionUpdateOne) Select(field string, fields ...string) *CoverVersionUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated CoverVersion entity.
func (cvuo *CoverVersionUpdateOne) Save(ctx context.Context) (*CoverVersion, error) {
	cvuo.defaults()
	return withHooks(ctx, cvuo.sqlSave, cvuo.mutation, cvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *CoverVersionUpdateOne) SaveX(ctx context.Context) *CoverVersion {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *CoverVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *CoverVersionUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvuo *CoverVersionUpdateOne) defaults() {
	if _, ok := cvuo.mutation.UpdatedAt(); !ok {
		v := coverversion.UpdateDefaultUpdatedAt()
		cvuo.mutation.SetUpdatedAt(v)
	}
}

func (cvuo *CoverVersionUpdateOne) sqlSave(ctx context.Context) (_node *CoverVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(coverversion.Table, coverversion.Columns, sqlgraph.NewFieldSpec(coverversion.FieldID, field.TypeInt))
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoverVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coverversion.FieldID)
		for _, f := range fields {
			if !coverversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coverversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvuo.mutation.Path(); ok {
		_spec.SetField(coverversion.FieldPath, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Format(); ok {
		_spec.SetField(coverversion.FieldFormat, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Size(); ok {
		_spec.SetField(coverversion.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cvuo.mutation.AddedSize(); ok {
		_spec.AddField(coverversion.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cvuo.mutation.Suffix(); ok {
		_spec.SetField(coverversion.FieldSuffix, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coverversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if cvuo.mutation.CoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coverversion.CoverTable,
			Columns: []string{coverversion.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.CoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coverversion.CoverTable,
			Columns: []string{coverversion.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CoverVersion{config: cvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coverversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cvuo.mutation.done = true
	return _node, nil
}
