// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ListenUpApp/ListenUp/internal/ent/bookcover"
	"github.com/ListenUpApp/ListenUp/internal/ent/coverversion"
)

// CoverVersionCreate is the builder for creating a CoverVersion entity.
type CoverVersionCreate struct {
	config
	mutation *CoverVersionMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (cvc *CoverVersionCreate) SetPath(s string) *CoverVersionCreate {
	cvc.mutation.SetPath(s)
	return cvc
}

// SetFormat sets the "format" field.
func (cvc *CoverVersionCreate) SetFormat(s string) *CoverVersionCreate {
	cvc.mutation.SetFormat(s)
	return cvc
}

// SetSize sets the "size" field.
func (cvc *CoverVersionCreate) SetSize(i int64) *CoverVersionCreate {
	cvc.mutation.SetSize(i)
	return cvc
}

// SetSuffix sets the "suffix" field.
func (cvc *CoverVersionCreate) SetSuffix(s string) *CoverVersionCreate {
	cvc.mutation.SetSuffix(s)
	return cvc
}

// SetUpdatedAt sets the "updated_at" field.
func (cvc *CoverVersionCreate) SetUpdatedAt(t time.Time) *CoverVersionCreate {
	cvc.mutation.SetUpdatedAt(t)
	return cvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cvc *CoverVersionCreate) SetNillableUpdatedAt(t *time.Time) *CoverVersionCreate {
	if t != nil {
		cvc.SetUpdatedAt(*t)
	}
	return cvc
}

// SetCoverID sets the "cover" edge to the BookCover entity by ID.
func (cvc *CoverVersionCreate) SetCoverID(id int) *CoverVersionCreate {
	cvc.mutation.SetCoverID(id)
	return cvc
}

// SetNillableCoverID sets the "cover" edge to the BookCover entity by ID if the given value is not nil.
func (cvc *CoverVersionCreate) SetNillableCoverID(id *int) *CoverVersionCreate {
	if id != nil {
		cvc = cvc.SetCoverID(*id)
	}
	return cvc
}

// SetCover sets the "cover" edge to the BookCover entity.
func (cvc *CoverVersionCreate) SetCover(b *BookCover) *CoverVersionCreate {
	return cvc.SetCoverID(b.ID)
}

// Mutation returns the CoverVersionMutation object of the builder.
func (cvc *CoverVersionCreate) Mutation() *CoverVersionMutation {
	return cvc.mutation
}

// Save creates the CoverVersion in the database.
func (cvc *CoverVersionCreate) Save(ctx context.Context) (*CoverVersion, error) {
	cvc.defaults()
	return withHooks(ctx, cvc.sqlSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *CoverVersionCreate) SaveX(ctx context.Context) *CoverVersion {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *CoverVersionCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *CoverVersionCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvc *CoverVersionCreate) defaults() {
	if _, ok := cvc.mutation.UpdatedAt(); !ok {
		v := coverversion.DefaultUpdatedAt()
		cvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *CoverVersionCreate) check() error {
	if _, ok := cvc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "CoverVersion.path"`)}
	}
	if _, ok := cvc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "CoverVersion.format"`)}
	}
	if _, ok := cvc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "CoverVersion.size"`)}
	}
	if _, ok := cvc.mutation.Suffix(); !ok {
		return &ValidationError{Name: "suffix", err: errors.New(`ent: missing required field "CoverVersion.suffix"`)}
	}
	if _, ok := cvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CoverVersion.updated_at"`)}
	}
	return nil
}

func (cvc *CoverVersionCreate) sqlSave(ctx context.Context) (*CoverVersion, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cvc.mutation.id = &_node.ID
	cvc.mutation.done = true
	return _node, nil
}

func (cvc *CoverVersionCreate) createSpec() (*CoverVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &CoverVersion{config: cvc.config}
		_spec = sqlgraph.NewCreateSpec(coverversion.Table, sqlgraph.NewFieldSpec(coverversion.FieldID, field.TypeInt))
	)
	if value, ok := cvc.mutation.Path(); ok {
		_spec.SetField(coverversion.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := cvc.mutation.Format(); ok {
		_spec.SetField(coverversion.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := cvc.mutation.Size(); ok {
		_spec.SetField(coverversion.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := cvc.mutation.Suffix(); ok {
		_spec.SetField(coverversion.FieldSuffix, field.TypeString, value)
		_node.Suffix = value
	}
	if value, ok := cvc.mutation.UpdatedAt(); ok {
		_spec.SetField(coverversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cvc.mutation.CoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coverversion.CoverTable,
			Columns: []string{coverversion.CoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.book_cover_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CoverVersionCreateBulk is the builder for creating many CoverVersion entities in bulk.
type CoverVersionCreateBulk struct {
	config
	err      error
	builders []*CoverVersionCreate
}

// Save creates the CoverVersion entities in the database.
func (cvcb *CoverVersionCreateBulk) Save(ctx context.Context) ([]*CoverVersion, error) {
	if cvcb.err != nil {
		return nil, cvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cvcb.builders))
	nodes := make([]*CoverVersion, len(cvcb.builders))
	mutators := make([]Mutator, len(cvcb.builders))
	for i := range cvcb.builders {
		func(i int, root context.Context) {
			builder := cvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoverVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cvcb *CoverVersionCreateBulk) SaveX(ctx context.Context) []*CoverVersion {
	v, err := cvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvcb *CoverVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := cvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvcb *CoverVersionCreateBulk) ExecX(ctx context.Context) {
	if err := cvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
