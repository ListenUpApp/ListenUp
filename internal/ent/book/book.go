// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldImportedAt holds the string denoting the imported_at field in the database.
	FieldImportedAt = "imported_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTitleSort holds the string denoting the title_sort field in the database.
	FieldTitleSort = "title_sort"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsbn holds the string denoting the isbn field in the database.
	FieldIsbn = "isbn"
	// FieldAsin holds the string denoting the asin field in the database.
	FieldAsin = "asin"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldExplicit holds the string denoting the explicit field in the database.
	FieldExplicit = "explicit"
	// FieldPublisher holds the string denoting the publisher field in the database.
	FieldPublisher = "publisher"
	// FieldPublishedDate holds the string denoting the published_date field in the database.
	FieldPublishedDate = "published_date"
	// FieldGenres holds the string denoting the genres field in the database.
	FieldGenres = "genres"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "chapters"
	// EdgeCover holds the string denoting the cover edge name in mutations.
	EdgeCover = "cover"
	// EdgeAuthors holds the string denoting the authors edge name in mutations.
	EdgeAuthors = "authors"
	// EdgeNarrators holds the string denoting the narrators edge name in mutations.
	EdgeNarrators = "narrators"
	// EdgeLibrary holds the string denoting the library edge name in mutations.
	EdgeLibrary = "library"
	// EdgeFolder holds the string denoting the folder edge name in mutations.
	EdgeFolder = "folder"
	// Table holds the table name of the book in the database.
	Table = "books"
	// ChaptersTable is the table that holds the chapters relation/edge.
	ChaptersTable = "chapters"
	// ChaptersInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ChaptersInverseTable = "chapters"
	// ChaptersColumn is the table column denoting the chapters relation/edge.
	ChaptersColumn = "book_chapters"
	// CoverTable is the table that holds the cover relation/edge.
	CoverTable = "book_covers"
	// CoverInverseTable is the table name for the BookCover entity.
	// It exists in this package in order to avoid circular dependency with the "bookcover" package.
	CoverInverseTable = "book_covers"
	// CoverColumn is the table column denoting the cover relation/edge.
	CoverColumn = "book_cover"
	// AuthorsTable is the table that holds the authors relation/edge. The primary key declared below.
	AuthorsTable = "author_books"
	// AuthorsInverseTable is the table name for the Author entity.
	// It exists in this package in order to avoid circular dependency with the "author" package.
	AuthorsInverseTable = "authors"
	// NarratorsTable is the table that holds the narrators relation/edge. The primary key declared below.
	NarratorsTable = "narrator_books"
	// NarratorsInverseTable is the table name for the Narrator entity.
	// It exists in this package in order to avoid circular dependency with the "narrator" package.
	NarratorsInverseTable = "narrators"
	// LibraryTable is the table that holds the library relation/edge.
	LibraryTable = "books"
	// LibraryInverseTable is the table name for the Library entity.
	// It exists in this package in order to avoid circular dependency with the "library" package.
	LibraryInverseTable = "libraries"
	// LibraryColumn is the table column denoting the library relation/edge.
	LibraryColumn = "library_library_books"
	// FolderTable is the table that holds the folder relation/edge.
	FolderTable = "books"
	// FolderInverseTable is the table name for the Folder entity.
	// It exists in this package in order to avoid circular dependency with the "folder" package.
	FolderInverseTable = "folders"
	// FolderColumn is the table column denoting the folder relation/edge.
	FolderColumn = "folder_books"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldDuration,
	FieldSize,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldImportedAt,
	FieldTitle,
	FieldTitleSort,
	FieldSubtitle,
	FieldDescription,
	FieldIsbn,
	FieldAsin,
	FieldLanguage,
	FieldExplicit,
	FieldPublisher,
	FieldPublishedDate,
	FieldGenres,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "books"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"folder_books",
	"library_library_books",
}

var (
	// AuthorsPrimaryKey and AuthorsColumn2 are the table columns denoting the
	// primary key for the authors relation (M2M).
	AuthorsPrimaryKey = []string{"author_id", "book_id"}
	// NarratorsPrimaryKey and NarratorsColumn2 are the table columns denoting the
	// primary key for the narrators relation (M2M).
	NarratorsPrimaryKey = []string{"narrator_id", "book_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExplicit holds the default value on creation for the "explicit" field.
	DefaultExplicit bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Book queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByImportedAt orders the results by the imported_at field.
func ByImportedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportedAt, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByTitleSort orders the results by the title_sort field.
func ByTitleSort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleSort, opts...).ToFunc()
}

// BySubtitle orders the results by the subtitle field.
func BySubtitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsbn orders the results by the isbn field.
func ByIsbn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsbn, opts...).ToFunc()
}

// ByAsin orders the results by the asin field.
func ByAsin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAsin, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByExplicit orders the results by the explicit field.
func ByExplicit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExplicit, opts...).ToFunc()
}

// ByPublisher orders the results by the publisher field.
func ByPublisher(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublisher, opts...).ToFunc()
}

// ByPublishedDate orders the results by the published_date field.
func ByPublishedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedDate, opts...).ToFunc()
}

// ByChaptersCount orders the results by chapters count.
func ByChaptersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChaptersStep(), opts...)
	}
}

// ByChapters orders the results by chapters terms.
func ByChapters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChaptersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCoverField orders the results by cover field.
func ByCoverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoverStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorsCount orders the results by authors count.
func ByAuthorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorsStep(), opts...)
	}
}

// ByAuthors orders the results by authors terms.
func ByAuthors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarratorsCount orders the results by narrators count.
func ByNarratorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarratorsStep(), opts...)
	}
}

// ByNarrators orders the results by narrators terms.
func ByNarrators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarratorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLibraryField orders the results by library field.
func ByLibraryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLibraryStep(), sql.OrderByField(field, opts...))
	}
}

// ByFolderField orders the results by folder field.
func ByFolderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFolderStep(), sql.OrderByField(field, opts...))
	}
}
func newChaptersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChaptersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
	)
}
func newCoverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CoverTable, CoverColumn),
	)
}
func newAuthorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AuthorsTable, AuthorsPrimaryKey...),
	)
}
func newNarratorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarratorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NarratorsTable, NarratorsPrimaryKey...),
	)
}
func newLibraryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LibraryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LibraryTable, LibraryColumn),
	)
}
func newFolderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FolderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FolderTable, FolderColumn),
	)
}
