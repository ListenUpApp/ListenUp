// Code generated by ent, DO NOT EDIT.

package seriesbook

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ListenUpApp/ListenUp/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldLTE(FieldID, id))
}

// Sequence applies equality check predicate on the "sequence" field. It's identical to SequenceEQ.
func Sequence(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldEQ(FieldSequence, v))
}

// SequenceEQ applies the EQ predicate on the "sequence" field.
func SequenceEQ(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldEQ(FieldSequence, v))
}

// SequenceNEQ applies the NEQ predicate on the "sequence" field.
func SequenceNEQ(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNEQ(FieldSequence, v))
}

// SequenceIn applies the In predicate on the "sequence" field.
func SequenceIn(vs ...float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldIn(FieldSequence, vs...))
}

// SequenceNotIn applies the NotIn predicate on the "sequence" field.
func SequenceNotIn(vs ...float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNotIn(FieldSequence, vs...))
}

// SequenceGT applies the GT predicate on the "sequence" field.
func SequenceGT(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldGT(FieldSequence, v))
}

// SequenceGTE applies the GTE predicate on the "sequence" field.
func SequenceGTE(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldGTE(FieldSequence, v))
}

// SequenceLT applies the LT predicate on the "sequence" field.
func SequenceLT(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldLT(FieldSequence, v))
}

// SequenceLTE applies the LTE predicate on the "sequence" field.
func SequenceLTE(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldLTE(FieldSequence, v))
}

// HasSeries applies the HasEdge predicate on the "series" edge.
func HasSeries() predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeriesWith applies the HasEdge predicate on the "series" edge with a given conditions (other predicates).
func HasSeriesWith(preds ...predicate.Series) predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := newSeriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBook applies the HasEdge predicate on the "book" edge.
func HasBook() predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BookTable, BookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookWith applies the HasEdge predicate on the "book" edge with a given conditions (other predicates).
func HasBookWith(preds ...predicate.Book) predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := newBookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SeriesBook) predicate.SeriesBook {
	return predicate.SeriesBook(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SeriesBook) predicate.SeriesBook {
	return predicate.SeriesBook(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SeriesBook) predicate.SeriesBook {
	return predicate.SeriesBook(sql.NotPredicates(p))
}
